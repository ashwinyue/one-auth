### One-Auth 用户管理接口测试
### 基础URL配置
@baseUrl = http://localhost:5555
@contentType = application/json

### 先登录获取Token (如果需要)
# @name login
POST {{baseUrl}}/login
Content-Type: {{contentType}}

{
  "username": "admin",
  "password": "admin123",
  "login_type": "username"
}

> {%
client.global.set("access_token", response.body.token);
client.global.set("user_id", response.body.user_id);
%}

###

### 1. 创建用户（无需认证）
# @name createUser
POST {{baseUrl}}/v1/users
Content-Type: {{contentType}}

{
  "username": "testuser001",
  "password": "Test123456!",
  "email": "testuser001@example.com",
  "phone": "13800138001",
  "nickname": "测试用户001",
  "avatar": "https://example.com/avatar.jpg",
  "gender": 1,
  "birthday": "1990-01-01",
  "description": "这是一个测试用户",
  "status": 1
}

> {%
client.global.set("created_user_id", response.body.user_id);
%}

###

### 2. 查询用户列表
GET {{baseUrl}}/v1/users?page=1&limit=10&search=test
Authorization: Bearer {{access_token}}

###

### 3. 查询用户列表（带筛选条件）
GET {{baseUrl}}/v1/users?page=1&limit=10&status=1&gender=1&created_start=2024-01-01&created_end=2024-12-31
Authorization: Bearer {{access_token}}

###

### 4. 查询用户详情
GET {{baseUrl}}/v1/users/{{created_user_id}}
Authorization: Bearer {{access_token}}

###

### 5. 更新用户信息
PUT {{baseUrl}}/v1/users/{{created_user_id}}
Content-Type: {{contentType}}
Authorization: Bearer {{access_token}}

{
  "username": "testuser001_updated",
  "email": "testuser001_updated@example.com",
  "phone": "13800138002",
  "nickname": "更新的测试用户001",
  "avatar": "https://example.com/new_avatar.jpg",
  "gender": 2,
  "birthday": "1995-05-05",
  "description": "这是一个更新后的测试用户",
  "status": 1
}

###

### 6. 修改用户密码
PUT {{baseUrl}}/v1/users/{{created_user_id}}/change-password
Content-Type: {{contentType}}
Authorization: Bearer {{access_token}}

{
  "old_password": "Test123456!",
  "new_password": "NewTest123456!",
  "confirm_password": "NewTest123456!"
}

###

### 7. 获取用户角色
GET {{baseUrl}}/v1/users/{{created_user_id}}/roles
Authorization: Bearer {{access_token}}

###

### 8. 分配用户角色
POST {{baseUrl}}/v1/users/roles
Content-Type: {{contentType}}
Authorization: Bearer {{access_token}}

{
  "user_id": "{{created_user_id}}",
  "role_ids": ["role_id_1", "role_id_2"],
  "operation": "assign"
}

###

### 9. 移除用户角色
POST {{baseUrl}}/v1/users/roles
Content-Type: {{contentType}}
Authorization: Bearer {{access_token}}

{
  "user_id": "{{created_user_id}}",
  "role_ids": ["role_id_1"],
  "operation": "remove"
}

###

### 10. 删除用户
DELETE {{baseUrl}}/v1/users/{{created_user_id}}
Authorization: Bearer {{access_token}}

###

### 11. 批量删除用户
DELETE {{baseUrl}}/v1/users
Content-Type: {{contentType}}
Authorization: Bearer {{access_token}}

{
  "user_ids": ["user_id_1", "user_id_2", "user_id_3"]
}

###

### ==================== 当前用户相关接口 ====================

### 12. 获取当前用户完整信息
GET {{baseUrl}}/v1/user/profile
Authorization: Bearer {{access_token}}

###

### 13. 获取当前用户权限
GET {{baseUrl}}/v1/user/permissions
Authorization: Bearer {{access_token}}

###

### 14. 获取当前用户菜单
GET {{baseUrl}}/v1/user/menus
Authorization: Bearer {{access_token}}

###

### 15. 获取当前用户租户列表
GET {{baseUrl}}/v1/user/tenants
Authorization: Bearer {{access_token}}

###

### 16. 切换租户
POST {{baseUrl}}/v1/user/switch-tenant
Content-Type: {{contentType}}
Authorization: Bearer {{access_token}}

{
  "tenant_id": "tenant_123"
}

###

### ==================== 错误测试用例 ====================

### 17. 创建用户 - 用户名已存在
POST {{baseUrl}}/v1/users
Content-Type: {{contentType}}

{
  "username": "admin",
  "password": "Test123456!",
  "email": "duplicate@example.com"
}

###

### 18. 创建用户 - 邮箱已存在
POST {{baseUrl}}/v1/users
Content-Type: {{contentType}}

{
  "username": "newuser",
  "password": "Test123456!",
  "email": "admin@example.com"
}

###

### 19. 创建用户 - 密码强度不够
POST {{baseUrl}}/v1/users
Content-Type: {{contentType}}

{
  "username": "weakuser",
  "password": "123",
  "email": "weak@example.com"
}

###

### 20. 查询不存在的用户
GET {{baseUrl}}/v1/users/nonexistent_user_id
Authorization: Bearer {{access_token}}

###

### 21. 无权限访问用户信息
GET {{baseUrl}}/v1/users
# 不带Authorization头

###

### 22. 修改密码 - 旧密码错误
PUT {{baseUrl}}/v1/users/{{user_id}}/change-password
Content-Type: {{contentType}}
Authorization: Bearer {{access_token}}

{
  "old_password": "wrong_old_password",
  "new_password": "NewTest123456!",
  "confirm_password": "NewTest123456!"
}

###

### 23. 修改密码 - 新密码确认不一致
PUT {{baseUrl}}/v1/users/{{user_id}}/change-password
Content-Type: {{contentType}}
Authorization: Bearer {{access_token}}

{
  "old_password": "admin123",
  "new_password": "NewTest123456!",
  "confirm_password": "DifferentPassword!"
}

### 