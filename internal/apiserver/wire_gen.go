// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package apiserver

import (
	"github.com/ashwinyue/one-auth/internal/apiserver/biz"
	"github.com/ashwinyue/one-auth/internal/apiserver/cache"
	"github.com/ashwinyue/one-auth/internal/apiserver/pkg/validation"
	"github.com/ashwinyue/one-auth/internal/apiserver/store"
	"github.com/ashwinyue/one-auth/internal/pkg/server"
	"github.com/ashwinyue/one-auth/pkg/authz"
)

// Injectors from wire.go:

func InitializeWebServer(config *Config) (server.Server, error) {
	string2 := config.ServerMode
	db, err := ProvideDB(config)
	if err != nil {
		return nil, err
	}
	datastore := store.NewStore(db)
	v := authz.DefaultOptions()
	authzAuthz, err := authz.NewAuthz(db, v...)
	if err != nil {
		return nil, err
	}
	client, err := ProvideRedis(config)
	if err != nil {
		return nil, err
	}
	dataCache := cache.NewCache(client)
	bizBiz := biz.NewBiz(datastore, authzAuthz, dataCache)
	validator := validation.New(datastore)
	userRetriever := &UserRetriever{
		store: datastore,
	}
	serverConfig := &ServerConfig{
		cfg:       config,
		biz:       bizBiz,
		val:       validator,
		retriever: userRetriever,
		authz:     authzAuthz,
	}
	serverServer, err := NewWebServer(string2, serverConfig)
	if err != nil {
		return nil, err
	}
	return serverServer, nil
}
