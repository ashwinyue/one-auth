// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ashwinyue/one-auth/internal/apiserver/biz (interfaces: IBiz)
//
// Generated by this command:
//
//	mockgen -destination mock_biz.go -package biz github.com/ashwinyue/one-auth/internal/apiserver/biz IBiz
//

// Package biz is a generated GoMock package.
package biz

import (
	reflect "reflect"

	menu "github.com/ashwinyue/one-auth/internal/apiserver/biz/v1/menu"
	permission "github.com/ashwinyue/one-auth/internal/apiserver/biz/v1/permission"
	post "github.com/ashwinyue/one-auth/internal/apiserver/biz/v1/post"
	role "github.com/ashwinyue/one-auth/internal/apiserver/biz/v1/role"
	tenant "github.com/ashwinyue/one-auth/internal/apiserver/biz/v1/tenant"
	user "github.com/ashwinyue/one-auth/internal/apiserver/biz/v1/user"
	gomock "go.uber.org/mock/gomock"
)

// MockIBiz is a mock of IBiz interface.
type MockIBiz struct {
	ctrl     *gomock.Controller
	recorder *MockIBizMockRecorder
	isgomock struct{}
}

// MockIBizMockRecorder is the mock recorder for MockIBiz.
type MockIBizMockRecorder struct {
	mock *MockIBiz
}

// NewMockIBiz creates a new mock instance.
func NewMockIBiz(ctrl *gomock.Controller) *MockIBiz {
	mock := &MockIBiz{ctrl: ctrl}
	mock.recorder = &MockIBizMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBiz) EXPECT() *MockIBizMockRecorder {
	return m.recorder
}

// MenuV1 mocks base method.
func (m *MockIBiz) MenuV1() menu.MenuBiz {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MenuV1")
	ret0, _ := ret[0].(menu.MenuBiz)
	return ret0
}

// MenuV1 indicates an expected call of MenuV1.
func (mr *MockIBizMockRecorder) MenuV1() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MenuV1", reflect.TypeOf((*MockIBiz)(nil).MenuV1))
}

// PermissionV1 mocks base method.
func (m *MockIBiz) PermissionV1() permission.PermissionBiz {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PermissionV1")
	ret0, _ := ret[0].(permission.PermissionBiz)
	return ret0
}

// PermissionV1 indicates an expected call of PermissionV1.
func (mr *MockIBizMockRecorder) PermissionV1() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PermissionV1", reflect.TypeOf((*MockIBiz)(nil).PermissionV1))
}

// PostV1 mocks base method.
func (m *MockIBiz) PostV1() post.PostBiz {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostV1")
	ret0, _ := ret[0].(post.PostBiz)
	return ret0
}

// PostV1 indicates an expected call of PostV1.
func (mr *MockIBizMockRecorder) PostV1() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostV1", reflect.TypeOf((*MockIBiz)(nil).PostV1))
}

// RoleV1 mocks base method.
func (m *MockIBiz) RoleV1() role.RoleBiz {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoleV1")
	ret0, _ := ret[0].(role.RoleBiz)
	return ret0
}

// RoleV1 indicates an expected call of RoleV1.
func (mr *MockIBizMockRecorder) RoleV1() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoleV1", reflect.TypeOf((*MockIBiz)(nil).RoleV1))
}

// TenantV1 mocks base method.
func (m *MockIBiz) TenantV1() tenant.TenantBiz {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TenantV1")
	ret0, _ := ret[0].(tenant.TenantBiz)
	return ret0
}

// TenantV1 indicates an expected call of TenantV1.
func (mr *MockIBizMockRecorder) TenantV1() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TenantV1", reflect.TypeOf((*MockIBiz)(nil).TenantV1))
}

// UserV1 mocks base method.
func (m *MockIBiz) UserV1() user.UserBiz {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserV1")
	ret0, _ := ret[0].(user.UserBiz)
	return ret0
}

// UserV1 indicates an expected call of UserV1.
func (mr *MockIBizMockRecorder) UserV1() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserV1", reflect.TypeOf((*MockIBiz)(nil).UserV1))
}
