// Copyright 2024 孔令飞 <colin404@foxmail.com>. All rights reserved.
// Use of this source code is governed by a MIT style
// license that can be found in the LICENSE file. The original repo for
// this file is https://github.com/ashwinyue/one-auth. The professional
// version of this repository is https://github.com/onexstack/onex.

// 管理员权限自动分配 API 定义

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.1
// source: apiserver/v1/permission_admin.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// CreateMenuWithPermissionsRequest 创建菜单并自动生成权限请求
type CreateMenuWithPermissionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// tenant_id 表示租户ID
	TenantId int64 `protobuf:"varint,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// title 表示菜单标题
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// route_path 表示路由路径
	RoutePath string `protobuf:"bytes,3,opt,name=route_path,json=routePath,proto3" json:"route_path,omitempty"`
	// icon 表示图标
	Icon string `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon,omitempty"`
	// parent_id 表示父菜单ID
	ParentId int64 `protobuf:"varint,5,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	// actions 表示需要创建的权限操作列表
	Actions []string `protobuf:"bytes,6,rep,name=actions,proto3" json:"actions,omitempty"`
	// visible 表示是否可见
	Visible bool `protobuf:"varint,7,opt,name=visible,proto3" json:"visible,omitempty"`
}

func (x *CreateMenuWithPermissionsRequest) Reset() {
	*x = CreateMenuWithPermissionsRequest{}
	mi := &file_apiserver_v1_permission_admin_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateMenuWithPermissionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMenuWithPermissionsRequest) ProtoMessage() {}

func (x *CreateMenuWithPermissionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apiserver_v1_permission_admin_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMenuWithPermissionsRequest.ProtoReflect.Descriptor instead.
func (*CreateMenuWithPermissionsRequest) Descriptor() ([]byte, []int) {
	return file_apiserver_v1_permission_admin_proto_rawDescGZIP(), []int{0}
}

func (x *CreateMenuWithPermissionsRequest) GetTenantId() int64 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

func (x *CreateMenuWithPermissionsRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateMenuWithPermissionsRequest) GetRoutePath() string {
	if x != nil {
		return x.RoutePath
	}
	return ""
}

func (x *CreateMenuWithPermissionsRequest) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *CreateMenuWithPermissionsRequest) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *CreateMenuWithPermissionsRequest) GetActions() []string {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *CreateMenuWithPermissionsRequest) GetVisible() bool {
	if x != nil {
		return x.Visible
	}
	return false
}

// CreateMenuWithPermissionsResponse 创建菜单并自动生成权限响应
type CreateMenuWithPermissionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// menu_id 表示创建的菜单ID
	MenuId int64 `protobuf:"varint,1,opt,name=menu_id,json=menuId,proto3" json:"menu_id,omitempty"`
	// permission_ids 表示创建的权限ID列表
	PermissionIds []int64 `protobuf:"varint,2,rep,packed,name=permission_ids,json=permissionIds,proto3" json:"permission_ids,omitempty"`
	// auto_assigned_roles 表示自动分配权限的角色列表
	AutoAssignedRoles []string `protobuf:"bytes,3,rep,name=auto_assigned_roles,json=autoAssignedRoles,proto3" json:"auto_assigned_roles,omitempty"`
}

func (x *CreateMenuWithPermissionsResponse) Reset() {
	*x = CreateMenuWithPermissionsResponse{}
	mi := &file_apiserver_v1_permission_admin_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateMenuWithPermissionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMenuWithPermissionsResponse) ProtoMessage() {}

func (x *CreateMenuWithPermissionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apiserver_v1_permission_admin_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMenuWithPermissionsResponse.ProtoReflect.Descriptor instead.
func (*CreateMenuWithPermissionsResponse) Descriptor() ([]byte, []int) {
	return file_apiserver_v1_permission_admin_proto_rawDescGZIP(), []int{1}
}

func (x *CreateMenuWithPermissionsResponse) GetMenuId() int64 {
	if x != nil {
		return x.MenuId
	}
	return 0
}

func (x *CreateMenuWithPermissionsResponse) GetPermissionIds() []int64 {
	if x != nil {
		return x.PermissionIds
	}
	return nil
}

func (x *CreateMenuWithPermissionsResponse) GetAutoAssignedRoles() []string {
	if x != nil {
		return x.AutoAssignedRoles
	}
	return nil
}

// PreviewPermissionAssignmentRequest 预览权限分配请求
type PreviewPermissionAssignmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// permission_name 表示权限名称
	PermissionName string `protobuf:"bytes,1,opt,name=permission_name,json=permissionName,proto3" json:"permission_name,omitempty"`
}

func (x *PreviewPermissionAssignmentRequest) Reset() {
	*x = PreviewPermissionAssignmentRequest{}
	mi := &file_apiserver_v1_permission_admin_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PreviewPermissionAssignmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviewPermissionAssignmentRequest) ProtoMessage() {}

func (x *PreviewPermissionAssignmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apiserver_v1_permission_admin_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviewPermissionAssignmentRequest.ProtoReflect.Descriptor instead.
func (*PreviewPermissionAssignmentRequest) Descriptor() ([]byte, []int) {
	return file_apiserver_v1_permission_admin_proto_rawDescGZIP(), []int{2}
}

func (x *PreviewPermissionAssignmentRequest) GetPermissionName() string {
	if x != nil {
		return x.PermissionName
	}
	return ""
}

// PreviewPermissionAssignmentResponse 预览权限分配响应
type PreviewPermissionAssignmentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// permission_name 表示权限名称
	PermissionName string `protobuf:"bytes,1,opt,name=permission_name,json=permissionName,proto3" json:"permission_name,omitempty"`
	// will_assign_to_super_admin 表示是否会分配给超级管理员
	WillAssignToSuperAdmin bool `protobuf:"varint,2,opt,name=will_assign_to_super_admin,json=willAssignToSuperAdmin,proto3" json:"will_assign_to_super_admin,omitempty"`
	// will_assign_to_admin 表示是否会分配给系统管理员
	WillAssignToAdmin bool `protobuf:"varint,3,opt,name=will_assign_to_admin,json=willAssignToAdmin,proto3" json:"will_assign_to_admin,omitempty"`
	// admin_assign_reason 表示管理员分配原因
	AdminAssignReason string `protobuf:"bytes,4,opt,name=admin_assign_reason,json=adminAssignReason,proto3" json:"admin_assign_reason,omitempty"`
}

func (x *PreviewPermissionAssignmentResponse) Reset() {
	*x = PreviewPermissionAssignmentResponse{}
	mi := &file_apiserver_v1_permission_admin_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PreviewPermissionAssignmentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviewPermissionAssignmentResponse) ProtoMessage() {}

func (x *PreviewPermissionAssignmentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apiserver_v1_permission_admin_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviewPermissionAssignmentResponse.ProtoReflect.Descriptor instead.
func (*PreviewPermissionAssignmentResponse) Descriptor() ([]byte, []int) {
	return file_apiserver_v1_permission_admin_proto_rawDescGZIP(), []int{3}
}

func (x *PreviewPermissionAssignmentResponse) GetPermissionName() string {
	if x != nil {
		return x.PermissionName
	}
	return ""
}

func (x *PreviewPermissionAssignmentResponse) GetWillAssignToSuperAdmin() bool {
	if x != nil {
		return x.WillAssignToSuperAdmin
	}
	return false
}

func (x *PreviewPermissionAssignmentResponse) GetWillAssignToAdmin() bool {
	if x != nil {
		return x.WillAssignToAdmin
	}
	return false
}

func (x *PreviewPermissionAssignmentResponse) GetAdminAssignReason() string {
	if x != nil {
		return x.AdminAssignReason
	}
	return ""
}

// SyncAdminPermissionsRequest 同步管理员权限请求
type SyncAdminPermissionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// tenant_id 表示租户ID
	TenantId int64 `protobuf:"varint,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
}

func (x *SyncAdminPermissionsRequest) Reset() {
	*x = SyncAdminPermissionsRequest{}
	mi := &file_apiserver_v1_permission_admin_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncAdminPermissionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncAdminPermissionsRequest) ProtoMessage() {}

func (x *SyncAdminPermissionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apiserver_v1_permission_admin_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncAdminPermissionsRequest.ProtoReflect.Descriptor instead.
func (*SyncAdminPermissionsRequest) Descriptor() ([]byte, []int) {
	return file_apiserver_v1_permission_admin_proto_rawDescGZIP(), []int{4}
}

func (x *SyncAdminPermissionsRequest) GetTenantId() int64 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

// SyncAdminPermissionsResponse 同步管理员权限响应
type SyncAdminPermissionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// assigned_count 表示分配的权限数量
	AssignedCount int32 `protobuf:"varint,1,opt,name=assigned_count,json=assignedCount,proto3" json:"assigned_count,omitempty"`
	// sync_details 表示同步详情
	SyncDetails []*SyncDetail `protobuf:"bytes,2,rep,name=sync_details,json=syncDetails,proto3" json:"sync_details,omitempty"`
}

func (x *SyncAdminPermissionsResponse) Reset() {
	*x = SyncAdminPermissionsResponse{}
	mi := &file_apiserver_v1_permission_admin_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncAdminPermissionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncAdminPermissionsResponse) ProtoMessage() {}

func (x *SyncAdminPermissionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apiserver_v1_permission_admin_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncAdminPermissionsResponse.ProtoReflect.Descriptor instead.
func (*SyncAdminPermissionsResponse) Descriptor() ([]byte, []int) {
	return file_apiserver_v1_permission_admin_proto_rawDescGZIP(), []int{5}
}

func (x *SyncAdminPermissionsResponse) GetAssignedCount() int32 {
	if x != nil {
		return x.AssignedCount
	}
	return 0
}

func (x *SyncAdminPermissionsResponse) GetSyncDetails() []*SyncDetail {
	if x != nil {
		return x.SyncDetails
	}
	return nil
}

// SyncDetail 同步详情
type SyncDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// role_name 表示角色名称
	RoleName string `protobuf:"bytes,1,opt,name=role_name,json=roleName,proto3" json:"role_name,omitempty"`
	// assigned_permissions 表示分配的权限数量
	AssignedPermissions int32 `protobuf:"varint,2,opt,name=assigned_permissions,json=assignedPermissions,proto3" json:"assigned_permissions,omitempty"`
}

func (x *SyncDetail) Reset() {
	*x = SyncDetail{}
	mi := &file_apiserver_v1_permission_admin_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncDetail) ProtoMessage() {}

func (x *SyncDetail) ProtoReflect() protoreflect.Message {
	mi := &file_apiserver_v1_permission_admin_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncDetail.ProtoReflect.Descriptor instead.
func (*SyncDetail) Descriptor() ([]byte, []int) {
	return file_apiserver_v1_permission_admin_proto_rawDescGZIP(), []int{6}
}

func (x *SyncDetail) GetRoleName() string {
	if x != nil {
		return x.RoleName
	}
	return ""
}

func (x *SyncDetail) GetAssignedPermissions() int32 {
	if x != nil {
		return x.AssignedPermissions
	}
	return 0
}

// GetAutoAssignConfigRequest 获取自动分配配置请求
type GetAutoAssignConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// tenant_id 表示租户ID
	TenantId int64 `protobuf:"varint,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
}

func (x *GetAutoAssignConfigRequest) Reset() {
	*x = GetAutoAssignConfigRequest{}
	mi := &file_apiserver_v1_permission_admin_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAutoAssignConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAutoAssignConfigRequest) ProtoMessage() {}

func (x *GetAutoAssignConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apiserver_v1_permission_admin_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAutoAssignConfigRequest.ProtoReflect.Descriptor instead.
func (*GetAutoAssignConfigRequest) Descriptor() ([]byte, []int) {
	return file_apiserver_v1_permission_admin_proto_rawDescGZIP(), []int{7}
}

func (x *GetAutoAssignConfigRequest) GetTenantId() int64 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

// GetAutoAssignConfigResponse 获取自动分配配置响应
type GetAutoAssignConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// enabled 表示是否启用自动分配
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// super_admin_roles 表示超级管理员角色列表
	SuperAdminRoles []*RoleInfo `protobuf:"bytes,2,rep,name=super_admin_roles,json=superAdminRoles,proto3" json:"super_admin_roles,omitempty"`
	// admin_roles 表示系统管理员角色列表
	AdminRoles []*RoleInfo `protobuf:"bytes,3,rep,name=admin_roles,json=adminRoles,proto3" json:"admin_roles,omitempty"`
	// permission_rules 表示权限分配规则
	PermissionRules []*PermissionRule `protobuf:"bytes,4,rep,name=permission_rules,json=permissionRules,proto3" json:"permission_rules,omitempty"`
}

func (x *GetAutoAssignConfigResponse) Reset() {
	*x = GetAutoAssignConfigResponse{}
	mi := &file_apiserver_v1_permission_admin_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAutoAssignConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAutoAssignConfigResponse) ProtoMessage() {}

func (x *GetAutoAssignConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apiserver_v1_permission_admin_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAutoAssignConfigResponse.ProtoReflect.Descriptor instead.
func (*GetAutoAssignConfigResponse) Descriptor() ([]byte, []int) {
	return file_apiserver_v1_permission_admin_proto_rawDescGZIP(), []int{8}
}

func (x *GetAutoAssignConfigResponse) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *GetAutoAssignConfigResponse) GetSuperAdminRoles() []*RoleInfo {
	if x != nil {
		return x.SuperAdminRoles
	}
	return nil
}

func (x *GetAutoAssignConfigResponse) GetAdminRoles() []*RoleInfo {
	if x != nil {
		return x.AdminRoles
	}
	return nil
}

func (x *GetAutoAssignConfigResponse) GetPermissionRules() []*PermissionRule {
	if x != nil {
		return x.PermissionRules
	}
	return nil
}

// UpdateAutoAssignConfigRequest 更新自动分配配置请求
type UpdateAutoAssignConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// tenant_id 表示租户ID
	TenantId int64 `protobuf:"varint,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// enabled 表示是否启用自动分配
	Enabled bool `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// admin_role_ids 表示系统管理员角色ID列表
	AdminRoleIds []int64 `protobuf:"varint,3,rep,packed,name=admin_role_ids,json=adminRoleIds,proto3" json:"admin_role_ids,omitempty"`
	// permission_rules 表示权限分配规则
	PermissionRules []*PermissionRule `protobuf:"bytes,4,rep,name=permission_rules,json=permissionRules,proto3" json:"permission_rules,omitempty"`
}

func (x *UpdateAutoAssignConfigRequest) Reset() {
	*x = UpdateAutoAssignConfigRequest{}
	mi := &file_apiserver_v1_permission_admin_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAutoAssignConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAutoAssignConfigRequest) ProtoMessage() {}

func (x *UpdateAutoAssignConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apiserver_v1_permission_admin_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAutoAssignConfigRequest.ProtoReflect.Descriptor instead.
func (*UpdateAutoAssignConfigRequest) Descriptor() ([]byte, []int) {
	return file_apiserver_v1_permission_admin_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateAutoAssignConfigRequest) GetTenantId() int64 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

func (x *UpdateAutoAssignConfigRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *UpdateAutoAssignConfigRequest) GetAdminRoleIds() []int64 {
	if x != nil {
		return x.AdminRoleIds
	}
	return nil
}

func (x *UpdateAutoAssignConfigRequest) GetPermissionRules() []*PermissionRule {
	if x != nil {
		return x.PermissionRules
	}
	return nil
}

// UpdateAutoAssignConfigResponse 更新自动分配配置响应
type UpdateAutoAssignConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// success 表示是否成功
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// message 表示操作结果消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UpdateAutoAssignConfigResponse) Reset() {
	*x = UpdateAutoAssignConfigResponse{}
	mi := &file_apiserver_v1_permission_admin_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAutoAssignConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAutoAssignConfigResponse) ProtoMessage() {}

func (x *UpdateAutoAssignConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apiserver_v1_permission_admin_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAutoAssignConfigResponse.ProtoReflect.Descriptor instead.
func (*UpdateAutoAssignConfigResponse) Descriptor() ([]byte, []int) {
	return file_apiserver_v1_permission_admin_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateAutoAssignConfigResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UpdateAutoAssignConfigResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// RoleInfo 角色信息
type RoleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id 表示角色ID
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// name 表示角色名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// description 表示角色描述
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *RoleInfo) Reset() {
	*x = RoleInfo{}
	mi := &file_apiserver_v1_permission_admin_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RoleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleInfo) ProtoMessage() {}

func (x *RoleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_apiserver_v1_permission_admin_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleInfo.ProtoReflect.Descriptor instead.
func (*RoleInfo) Descriptor() ([]byte, []int) {
	return file_apiserver_v1_permission_admin_proto_rawDescGZIP(), []int{11}
}

func (x *RoleInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RoleInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RoleInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// PermissionRule 权限分配规则
type PermissionRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// modules 表示匹配的权限模块
	Modules []string `protobuf:"bytes,1,rep,name=modules,proto3" json:"modules,omitempty"`
	// actions 表示匹配的权限操作
	Actions []string `protobuf:"bytes,2,rep,name=actions,proto3" json:"actions,omitempty"`
	// exclude_names 表示排除的权限名称
	ExcludeNames []string `protobuf:"bytes,3,rep,name=exclude_names,json=excludeNames,proto3" json:"exclude_names,omitempty"`
	// include 表示是否包含该规则
	Include bool `protobuf:"varint,4,opt,name=include,proto3" json:"include,omitempty"`
	// description 表示规则描述
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *PermissionRule) Reset() {
	*x = PermissionRule{}
	mi := &file_apiserver_v1_permission_admin_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PermissionRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionRule) ProtoMessage() {}

func (x *PermissionRule) ProtoReflect() protoreflect.Message {
	mi := &file_apiserver_v1_permission_admin_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionRule.ProtoReflect.Descriptor instead.
func (*PermissionRule) Descriptor() ([]byte, []int) {
	return file_apiserver_v1_permission_admin_proto_rawDescGZIP(), []int{12}
}

func (x *PermissionRule) GetModules() []string {
	if x != nil {
		return x.Modules
	}
	return nil
}

func (x *PermissionRule) GetActions() []string {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *PermissionRule) GetExcludeNames() []string {
	if x != nil {
		return x.ExcludeNames
	}
	return nil
}

func (x *PermissionRule) GetInclude() bool {
	if x != nil {
		return x.Include
	}
	return false
}

func (x *PermissionRule) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// GetAdminMissingPermissionsRequest 获取管理员缺失权限请求
type GetAdminMissingPermissionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// tenant_id 表示租户ID
	TenantId int64 `protobuf:"varint,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// role_id 表示角色ID（可选，默认获取所有管理员角色）
	RoleId int64 `protobuf:"varint,2,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
}

func (x *GetAdminMissingPermissionsRequest) Reset() {
	*x = GetAdminMissingPermissionsRequest{}
	mi := &file_apiserver_v1_permission_admin_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAdminMissingPermissionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAdminMissingPermissionsRequest) ProtoMessage() {}

func (x *GetAdminMissingPermissionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apiserver_v1_permission_admin_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAdminMissingPermissionsRequest.ProtoReflect.Descriptor instead.
func (*GetAdminMissingPermissionsRequest) Descriptor() ([]byte, []int) {
	return file_apiserver_v1_permission_admin_proto_rawDescGZIP(), []int{13}
}

func (x *GetAdminMissingPermissionsRequest) GetTenantId() int64 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

func (x *GetAdminMissingPermissionsRequest) GetRoleId() int64 {
	if x != nil {
		return x.RoleId
	}
	return 0
}

// GetAdminMissingPermissionsResponse 获取管理员缺失权限响应
type GetAdminMissingPermissionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// missing_permissions 表示缺失的权限列表
	MissingPermissions []*MissingPermission `protobuf:"bytes,1,rep,name=missing_permissions,json=missingPermissions,proto3" json:"missing_permissions,omitempty"`
	// total_missing 表示总缺失数量
	TotalMissing int32 `protobuf:"varint,2,opt,name=total_missing,json=totalMissing,proto3" json:"total_missing,omitempty"`
}

func (x *GetAdminMissingPermissionsResponse) Reset() {
	*x = GetAdminMissingPermissionsResponse{}
	mi := &file_apiserver_v1_permission_admin_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAdminMissingPermissionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAdminMissingPermissionsResponse) ProtoMessage() {}

func (x *GetAdminMissingPermissionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apiserver_v1_permission_admin_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAdminMissingPermissionsResponse.ProtoReflect.Descriptor instead.
func (*GetAdminMissingPermissionsResponse) Descriptor() ([]byte, []int) {
	return file_apiserver_v1_permission_admin_proto_rawDescGZIP(), []int{14}
}

func (x *GetAdminMissingPermissionsResponse) GetMissingPermissions() []*MissingPermission {
	if x != nil {
		return x.MissingPermissions
	}
	return nil
}

func (x *GetAdminMissingPermissionsResponse) GetTotalMissing() int32 {
	if x != nil {
		return x.TotalMissing
	}
	return 0
}

// MissingPermission 缺失权限信息
type MissingPermission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// permission_id 表示权限ID
	PermissionId int64 `protobuf:"varint,1,opt,name=permission_id,json=permissionId,proto3" json:"permission_id,omitempty"`
	// permission_name 表示权限名称
	PermissionName string `protobuf:"bytes,2,opt,name=permission_name,json=permissionName,proto3" json:"permission_name,omitempty"`
	// reason 表示缺失原因
	Reason string `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	// should_assign 表示是否应该分配
	ShouldAssign bool `protobuf:"varint,4,opt,name=should_assign,json=shouldAssign,proto3" json:"should_assign,omitempty"`
}

func (x *MissingPermission) Reset() {
	*x = MissingPermission{}
	mi := &file_apiserver_v1_permission_admin_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MissingPermission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MissingPermission) ProtoMessage() {}

func (x *MissingPermission) ProtoReflect() protoreflect.Message {
	mi := &file_apiserver_v1_permission_admin_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MissingPermission.ProtoReflect.Descriptor instead.
func (*MissingPermission) Descriptor() ([]byte, []int) {
	return file_apiserver_v1_permission_admin_proto_rawDescGZIP(), []int{15}
}

func (x *MissingPermission) GetPermissionId() int64 {
	if x != nil {
		return x.PermissionId
	}
	return 0
}

func (x *MissingPermission) GetPermissionName() string {
	if x != nil {
		return x.PermissionName
	}
	return ""
}

func (x *MissingPermission) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *MissingPermission) GetShouldAssign() bool {
	if x != nil {
		return x.ShouldAssign
	}
	return false
}

var File_apiserver_v1_permission_admin_proto protoreflect.FileDescriptor

var file_apiserver_v1_permission_admin_proto_rawDesc = []byte{
	0x0a, 0x23, 0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x76, 0x31, 0x22, 0xd9, 0x01, 0x0a, 0x20, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x57, 0x69, 0x74, 0x68, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x69, 0x63, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x76, 0x69,
	0x73, 0x69, 0x62, 0x6c, 0x65, 0x22, 0x93, 0x01, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4d, 0x65, 0x6e, 0x75, 0x57, 0x69, 0x74, 0x68, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6d,
	0x65, 0x6e, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x65,
	0x6e, 0x75, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x61,
	0x75, 0x74, 0x6f, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x6c,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x61, 0x75, 0x74, 0x6f, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x22, 0x4d, 0x0a, 0x22, 0x50,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xeb, 0x01, 0x0a, 0x23, 0x50,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x1a, 0x77,
	0x69, 0x6c, 0x6c, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x16, 0x77, 0x69, 0x6c, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x54, 0x6f, 0x53, 0x75, 0x70,
	0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x2f, 0x0a, 0x14, 0x77, 0x69, 0x6c, 0x6c, 0x5f,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x77, 0x69, 0x6c, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x54, 0x6f, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x3a, 0x0a, 0x1b, 0x53, 0x79, 0x6e, 0x63,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x22, 0x78, 0x0a, 0x1c, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x0c, 0x73,
	0x79, 0x6e, 0x63, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x0b, 0x73, 0x79, 0x6e, 0x63, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x5c,
	0x0a, 0x0a, 0x53, 0x79, 0x6e, 0x63, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1b, 0x0a, 0x09,
	0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x6f, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x14, 0x61, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x39, 0x0a, 0x1a,
	0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xdf, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x41,
	0x75, 0x74, 0x6f, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x38, 0x0a, 0x11, 0x73, 0x75, 0x70, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x0b, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x10, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x22, 0xbb, 0x01, 0x0a, 0x1d, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x6f, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x12, 0x3d, 0x0a, 0x10, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x54, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x50, 0x0a,
	0x08, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xa5, 0x01, 0x0a, 0x0e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x75,
	0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x65,
	0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x59, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x6f, 0x6c, 0x65,
	0x49, 0x64, 0x22, 0x91, 0x01, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4d,
	0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x13, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d,
	0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x22, 0x9e, 0x01, 0x0a, 0x11, 0x4d, 0x69, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d,
	0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x61, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x68, 0x6f, 0x75, 0x6c,
	0x64, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x42, 0x37, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x73, 0x68, 0x77, 0x69, 0x6e, 0x79, 0x75, 0x65, 0x2f,
	0x6f, 0x6e, 0x65, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_apiserver_v1_permission_admin_proto_rawDescOnce sync.Once
	file_apiserver_v1_permission_admin_proto_rawDescData = file_apiserver_v1_permission_admin_proto_rawDesc
)

func file_apiserver_v1_permission_admin_proto_rawDescGZIP() []byte {
	file_apiserver_v1_permission_admin_proto_rawDescOnce.Do(func() {
		file_apiserver_v1_permission_admin_proto_rawDescData = protoimpl.X.CompressGZIP(file_apiserver_v1_permission_admin_proto_rawDescData)
	})
	return file_apiserver_v1_permission_admin_proto_rawDescData
}

var file_apiserver_v1_permission_admin_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_apiserver_v1_permission_admin_proto_goTypes = []any{
	(*CreateMenuWithPermissionsRequest)(nil),    // 0: v1.CreateMenuWithPermissionsRequest
	(*CreateMenuWithPermissionsResponse)(nil),   // 1: v1.CreateMenuWithPermissionsResponse
	(*PreviewPermissionAssignmentRequest)(nil),  // 2: v1.PreviewPermissionAssignmentRequest
	(*PreviewPermissionAssignmentResponse)(nil), // 3: v1.PreviewPermissionAssignmentResponse
	(*SyncAdminPermissionsRequest)(nil),         // 4: v1.SyncAdminPermissionsRequest
	(*SyncAdminPermissionsResponse)(nil),        // 5: v1.SyncAdminPermissionsResponse
	(*SyncDetail)(nil),                          // 6: v1.SyncDetail
	(*GetAutoAssignConfigRequest)(nil),          // 7: v1.GetAutoAssignConfigRequest
	(*GetAutoAssignConfigResponse)(nil),         // 8: v1.GetAutoAssignConfigResponse
	(*UpdateAutoAssignConfigRequest)(nil),       // 9: v1.UpdateAutoAssignConfigRequest
	(*UpdateAutoAssignConfigResponse)(nil),      // 10: v1.UpdateAutoAssignConfigResponse
	(*RoleInfo)(nil),                            // 11: v1.RoleInfo
	(*PermissionRule)(nil),                      // 12: v1.PermissionRule
	(*GetAdminMissingPermissionsRequest)(nil),   // 13: v1.GetAdminMissingPermissionsRequest
	(*GetAdminMissingPermissionsResponse)(nil),  // 14: v1.GetAdminMissingPermissionsResponse
	(*MissingPermission)(nil),                   // 15: v1.MissingPermission
}
var file_apiserver_v1_permission_admin_proto_depIdxs = []int32{
	6,  // 0: v1.SyncAdminPermissionsResponse.sync_details:type_name -> v1.SyncDetail
	11, // 1: v1.GetAutoAssignConfigResponse.super_admin_roles:type_name -> v1.RoleInfo
	11, // 2: v1.GetAutoAssignConfigResponse.admin_roles:type_name -> v1.RoleInfo
	12, // 3: v1.GetAutoAssignConfigResponse.permission_rules:type_name -> v1.PermissionRule
	12, // 4: v1.UpdateAutoAssignConfigRequest.permission_rules:type_name -> v1.PermissionRule
	15, // 5: v1.GetAdminMissingPermissionsResponse.missing_permissions:type_name -> v1.MissingPermission
	6,  // [6:6] is the sub-list for method output_type
	6,  // [6:6] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_apiserver_v1_permission_admin_proto_init() }
func file_apiserver_v1_permission_admin_proto_init() {
	if File_apiserver_v1_permission_admin_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_apiserver_v1_permission_admin_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_apiserver_v1_permission_admin_proto_goTypes,
		DependencyIndexes: file_apiserver_v1_permission_admin_proto_depIdxs,
		MessageInfos:      file_apiserver_v1_permission_admin_proto_msgTypes,
	}.Build()
	File_apiserver_v1_permission_admin_proto = out.File
	file_apiserver_v1_permission_admin_proto_rawDesc = nil
	file_apiserver_v1_permission_admin_proto_goTypes = nil
	file_apiserver_v1_permission_admin_proto_depIdxs = nil
}
