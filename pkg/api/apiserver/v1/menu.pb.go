// Copyright 2024 孔令飞 <colin404@foxmail.com>. All rights reserved.
// Use of this source code is governed by a MIT style
// license that can be found in the LICENSE file. The original repo for
// this file is https://github.com/ashwinyue/one-auth. The professional
// version of this repository is https://github.com/onexstack/onex.

// 菜单管理 API 定义

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.29.3
// source: apiserver/v1/menu.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Menu 表示菜单信息
type Menu struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id 表示菜单主键ID
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// tenant_id 表示租户ID
	TenantId int64 `protobuf:"varint,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// parent_id 表示父菜单ID
	ParentId int64 `protobuf:"varint,3,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	// menu_code 表示菜单编码
	MenuCode string `protobuf:"bytes,4,opt,name=menu_code,json=menuCode,proto3" json:"menu_code,omitempty"`
	// title 表示菜单标题
	Title string `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	// route_path 表示前端路由路径
	RoutePath string `protobuf:"bytes,6,opt,name=route_path,json=routePath,proto3" json:"route_path,omitempty"`
	// api_path 表示API访问路径
	ApiPath string `protobuf:"bytes,7,opt,name=api_path,json=apiPath,proto3" json:"api_path,omitempty"`
	// http_methods 表示支持的HTTP方法
	HttpMethods string `protobuf:"bytes,8,opt,name=http_methods,json=httpMethods,proto3" json:"http_methods,omitempty"`
	// require_auth 表示是否需要认证
	RequireAuth bool `protobuf:"varint,9,opt,name=require_auth,json=requireAuth,proto3" json:"require_auth,omitempty"`
	// component 表示前端组件路径
	Component string `protobuf:"bytes,10,opt,name=component,proto3" json:"component,omitempty"`
	// icon 表示图标
	Icon string `protobuf:"bytes,11,opt,name=icon,proto3" json:"icon,omitempty"`
	// sort_order 表示排序
	SortOrder int32 `protobuf:"varint,12,opt,name=sort_order,json=sortOrder,proto3" json:"sort_order,omitempty"`
	// menu_type 表示菜单类型：1-菜单，2-按钮，3-接口
	MenuType int32 `protobuf:"varint,13,opt,name=menu_type,json=menuType,proto3" json:"menu_type,omitempty"`
	// visible 表示是否可见
	Visible bool `protobuf:"varint,14,opt,name=visible,proto3" json:"visible,omitempty"`
	// status 表示状态
	Status int32 `protobuf:"varint,15,opt,name=status,proto3" json:"status,omitempty"`
	// children 表示子菜单
	Children []*Menu `protobuf:"bytes,16,rep,name=children,proto3" json:"children,omitempty"`
	// created_at 表示创建时间
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// updated_at 表示更新时间
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *Menu) Reset() {
	*x = Menu{}
	mi := &file_apiserver_v1_menu_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Menu) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Menu) ProtoMessage() {}

func (x *Menu) ProtoReflect() protoreflect.Message {
	mi := &file_apiserver_v1_menu_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Menu.ProtoReflect.Descriptor instead.
func (*Menu) Descriptor() ([]byte, []int) {
	return file_apiserver_v1_menu_proto_rawDescGZIP(), []int{0}
}

func (x *Menu) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Menu) GetTenantId() int64 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

func (x *Menu) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *Menu) GetMenuCode() string {
	if x != nil {
		return x.MenuCode
	}
	return ""
}

func (x *Menu) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Menu) GetRoutePath() string {
	if x != nil {
		return x.RoutePath
	}
	return ""
}

func (x *Menu) GetApiPath() string {
	if x != nil {
		return x.ApiPath
	}
	return ""
}

func (x *Menu) GetHttpMethods() string {
	if x != nil {
		return x.HttpMethods
	}
	return ""
}

func (x *Menu) GetRequireAuth() bool {
	if x != nil {
		return x.RequireAuth
	}
	return false
}

func (x *Menu) GetComponent() string {
	if x != nil {
		return x.Component
	}
	return ""
}

func (x *Menu) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *Menu) GetSortOrder() int32 {
	if x != nil {
		return x.SortOrder
	}
	return 0
}

func (x *Menu) GetMenuType() int32 {
	if x != nil {
		return x.MenuType
	}
	return 0
}

func (x *Menu) GetVisible() bool {
	if x != nil {
		return x.Visible
	}
	return false
}

func (x *Menu) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Menu) GetChildren() []*Menu {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *Menu) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Menu) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

// CreateMenuRequest 表示创建菜单请求
type CreateMenuRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// tenant_id 表示租户ID
	TenantId int64 `protobuf:"varint,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// parent_id 表示父菜单ID
	ParentId int64 `protobuf:"varint,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	// menu_code 表示菜单编码
	MenuCode string `protobuf:"bytes,3,opt,name=menu_code,json=menuCode,proto3" json:"menu_code,omitempty"`
	// title 表示菜单标题
	Title string `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	// route_path 表示前端路由路径
	RoutePath string `protobuf:"bytes,5,opt,name=route_path,json=routePath,proto3" json:"route_path,omitempty"`
	// component 表示前端组件路径
	Component string `protobuf:"bytes,6,opt,name=component,proto3" json:"component,omitempty"`
	// icon 表示图标
	Icon string `protobuf:"bytes,7,opt,name=icon,proto3" json:"icon,omitempty"`
	// sort_order 表示排序
	SortOrder int32 `protobuf:"varint,8,opt,name=sort_order,json=sortOrder,proto3" json:"sort_order,omitempty"`
	// menu_type 表示菜单类型
	MenuType int32 `protobuf:"varint,9,opt,name=menu_type,json=menuType,proto3" json:"menu_type,omitempty"`
	// visible 表示是否可见
	Visible bool `protobuf:"varint,10,opt,name=visible,proto3" json:"visible,omitempty"`
	// status 表示状态
	Status bool `protobuf:"varint,11,opt,name=status,proto3" json:"status,omitempty"`
	// remark 表示备注
	Remark string `protobuf:"bytes,12,opt,name=remark,proto3" json:"remark,omitempty"`
}

func (x *CreateMenuRequest) Reset() {
	*x = CreateMenuRequest{}
	mi := &file_apiserver_v1_menu_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateMenuRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMenuRequest) ProtoMessage() {}

func (x *CreateMenuRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apiserver_v1_menu_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMenuRequest.ProtoReflect.Descriptor instead.
func (*CreateMenuRequest) Descriptor() ([]byte, []int) {
	return file_apiserver_v1_menu_proto_rawDescGZIP(), []int{1}
}

func (x *CreateMenuRequest) GetTenantId() int64 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

func (x *CreateMenuRequest) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *CreateMenuRequest) GetMenuCode() string {
	if x != nil {
		return x.MenuCode
	}
	return ""
}

func (x *CreateMenuRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateMenuRequest) GetRoutePath() string {
	if x != nil {
		return x.RoutePath
	}
	return ""
}

func (x *CreateMenuRequest) GetComponent() string {
	if x != nil {
		return x.Component
	}
	return ""
}

func (x *CreateMenuRequest) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *CreateMenuRequest) GetSortOrder() int32 {
	if x != nil {
		return x.SortOrder
	}
	return 0
}

func (x *CreateMenuRequest) GetMenuType() int32 {
	if x != nil {
		return x.MenuType
	}
	return 0
}

func (x *CreateMenuRequest) GetVisible() bool {
	if x != nil {
		return x.Visible
	}
	return false
}

func (x *CreateMenuRequest) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *CreateMenuRequest) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

// CreateMenuResponse 表示创建菜单响应
type CreateMenuResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// menu_id 表示创建的菜单ID
	MenuId int64 `protobuf:"varint,1,opt,name=menu_id,json=menuId,proto3" json:"menu_id,omitempty"`
	// message 表示响应消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CreateMenuResponse) Reset() {
	*x = CreateMenuResponse{}
	mi := &file_apiserver_v1_menu_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateMenuResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMenuResponse) ProtoMessage() {}

func (x *CreateMenuResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apiserver_v1_menu_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMenuResponse.ProtoReflect.Descriptor instead.
func (*CreateMenuResponse) Descriptor() ([]byte, []int) {
	return file_apiserver_v1_menu_proto_rawDescGZIP(), []int{2}
}

func (x *CreateMenuResponse) GetMenuId() int64 {
	if x != nil {
		return x.MenuId
	}
	return 0
}

func (x *CreateMenuResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// UpdateMenuRequest 表示更新菜单请求
type UpdateMenuRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// menu_id 表示菜单ID
	MenuId int64 `protobuf:"varint,1,opt,name=menu_id,json=menuId,proto3" json:"menu_id,omitempty"`
	// parent_id 表示父菜单ID（可选）
	ParentId *int64 `protobuf:"varint,2,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	// menu_code 表示菜单编码（可选）
	MenuCode string `protobuf:"bytes,3,opt,name=menu_code,json=menuCode,proto3" json:"menu_code,omitempty"`
	// title 表示菜单标题（可选）
	Title string `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	// route_path 表示前端路由路径（可选）
	RoutePath *string `protobuf:"bytes,5,opt,name=route_path,json=routePath,proto3,oneof" json:"route_path,omitempty"`
	// component 表示前端组件路径（可选）
	Component *string `protobuf:"bytes,6,opt,name=component,proto3,oneof" json:"component,omitempty"`
	// icon 表示图标（可选）
	Icon *string `protobuf:"bytes,7,opt,name=icon,proto3,oneof" json:"icon,omitempty"`
	// sort_order 表示排序（可选）
	SortOrder *int32 `protobuf:"varint,8,opt,name=sort_order,json=sortOrder,proto3,oneof" json:"sort_order,omitempty"`
	// menu_type 表示菜单类型（可选）
	MenuType *int32 `protobuf:"varint,9,opt,name=menu_type,json=menuType,proto3,oneof" json:"menu_type,omitempty"`
	// visible 表示是否可见（可选）
	Visible *bool `protobuf:"varint,10,opt,name=visible,proto3,oneof" json:"visible,omitempty"`
	// status 表示状态（可选）
	Status *bool `protobuf:"varint,11,opt,name=status,proto3,oneof" json:"status,omitempty"`
	// remark 表示备注（可选）
	Remark *string `protobuf:"bytes,12,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
}

func (x *UpdateMenuRequest) Reset() {
	*x = UpdateMenuRequest{}
	mi := &file_apiserver_v1_menu_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateMenuRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMenuRequest) ProtoMessage() {}

func (x *UpdateMenuRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apiserver_v1_menu_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMenuRequest.ProtoReflect.Descriptor instead.
func (*UpdateMenuRequest) Descriptor() ([]byte, []int) {
	return file_apiserver_v1_menu_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateMenuRequest) GetMenuId() int64 {
	if x != nil {
		return x.MenuId
	}
	return 0
}

func (x *UpdateMenuRequest) GetParentId() int64 {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return 0
}

func (x *UpdateMenuRequest) GetMenuCode() string {
	if x != nil {
		return x.MenuCode
	}
	return ""
}

func (x *UpdateMenuRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpdateMenuRequest) GetRoutePath() string {
	if x != nil && x.RoutePath != nil {
		return *x.RoutePath
	}
	return ""
}

func (x *UpdateMenuRequest) GetComponent() string {
	if x != nil && x.Component != nil {
		return *x.Component
	}
	return ""
}

func (x *UpdateMenuRequest) GetIcon() string {
	if x != nil && x.Icon != nil {
		return *x.Icon
	}
	return ""
}

func (x *UpdateMenuRequest) GetSortOrder() int32 {
	if x != nil && x.SortOrder != nil {
		return *x.SortOrder
	}
	return 0
}

func (x *UpdateMenuRequest) GetMenuType() int32 {
	if x != nil && x.MenuType != nil {
		return *x.MenuType
	}
	return 0
}

func (x *UpdateMenuRequest) GetVisible() bool {
	if x != nil && x.Visible != nil {
		return *x.Visible
	}
	return false
}

func (x *UpdateMenuRequest) GetStatus() bool {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return false
}

func (x *UpdateMenuRequest) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

// UpdateMenuResponse 表示更新菜单响应
type UpdateMenuResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// success 表示是否成功
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// message 表示响应消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UpdateMenuResponse) Reset() {
	*x = UpdateMenuResponse{}
	mi := &file_apiserver_v1_menu_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateMenuResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMenuResponse) ProtoMessage() {}

func (x *UpdateMenuResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apiserver_v1_menu_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMenuResponse.ProtoReflect.Descriptor instead.
func (*UpdateMenuResponse) Descriptor() ([]byte, []int) {
	return file_apiserver_v1_menu_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateMenuResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UpdateMenuResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// DeleteMenuRequest 表示删除菜单请求
type DeleteMenuRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// menu_id 表示菜单ID
	MenuId int64 `protobuf:"varint,1,opt,name=menu_id,json=menuId,proto3" json:"menu_id,omitempty"`
	// force 表示是否强制删除（包括子菜单）
	Force bool `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty"`
}

func (x *DeleteMenuRequest) Reset() {
	*x = DeleteMenuRequest{}
	mi := &file_apiserver_v1_menu_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteMenuRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMenuRequest) ProtoMessage() {}

func (x *DeleteMenuRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apiserver_v1_menu_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMenuRequest.ProtoReflect.Descriptor instead.
func (*DeleteMenuRequest) Descriptor() ([]byte, []int) {
	return file_apiserver_v1_menu_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteMenuRequest) GetMenuId() int64 {
	if x != nil {
		return x.MenuId
	}
	return 0
}

func (x *DeleteMenuRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

// DeleteMenuResponse 表示删除菜单响应
type DeleteMenuResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// success 表示是否成功
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// message 表示响应消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteMenuResponse) Reset() {
	*x = DeleteMenuResponse{}
	mi := &file_apiserver_v1_menu_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteMenuResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMenuResponse) ProtoMessage() {}

func (x *DeleteMenuResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apiserver_v1_menu_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMenuResponse.ProtoReflect.Descriptor instead.
func (*DeleteMenuResponse) Descriptor() ([]byte, []int) {
	return file_apiserver_v1_menu_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteMenuResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DeleteMenuResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// GetMenuRequest 表示获取菜单详情请求
type GetMenuRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// menu_id 表示菜单ID
	MenuId int64 `protobuf:"varint,1,opt,name=menu_id,json=menuId,proto3" json:"menu_id,omitempty"`
}

func (x *GetMenuRequest) Reset() {
	*x = GetMenuRequest{}
	mi := &file_apiserver_v1_menu_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMenuRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMenuRequest) ProtoMessage() {}

func (x *GetMenuRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apiserver_v1_menu_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMenuRequest.ProtoReflect.Descriptor instead.
func (*GetMenuRequest) Descriptor() ([]byte, []int) {
	return file_apiserver_v1_menu_proto_rawDescGZIP(), []int{7}
}

func (x *GetMenuRequest) GetMenuId() int64 {
	if x != nil {
		return x.MenuId
	}
	return 0
}

// GetMenuResponse 表示获取菜单详情响应
type GetMenuResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// menu 表示菜单信息
	Menu *Menu `protobuf:"bytes,1,opt,name=menu,proto3" json:"menu,omitempty"`
}

func (x *GetMenuResponse) Reset() {
	*x = GetMenuResponse{}
	mi := &file_apiserver_v1_menu_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMenuResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMenuResponse) ProtoMessage() {}

func (x *GetMenuResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apiserver_v1_menu_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMenuResponse.ProtoReflect.Descriptor instead.
func (*GetMenuResponse) Descriptor() ([]byte, []int) {
	return file_apiserver_v1_menu_proto_rawDescGZIP(), []int{8}
}

func (x *GetMenuResponse) GetMenu() *Menu {
	if x != nil {
		return x.Menu
	}
	return nil
}

// GetUserMenusRequest 表示获取用户菜单请求
type GetUserMenusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// tenant_id 表示租户ID
	// @gotags: form:"tenant_id"
	TenantId int64 `protobuf:"varint,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty" form:"tenant_id"`
}

func (x *GetUserMenusRequest) Reset() {
	*x = GetUserMenusRequest{}
	mi := &file_apiserver_v1_menu_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserMenusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserMenusRequest) ProtoMessage() {}

func (x *GetUserMenusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apiserver_v1_menu_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserMenusRequest.ProtoReflect.Descriptor instead.
func (*GetUserMenusRequest) Descriptor() ([]byte, []int) {
	return file_apiserver_v1_menu_proto_rawDescGZIP(), []int{9}
}

func (x *GetUserMenusRequest) GetTenantId() int64 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

// GetUserMenusResponse 表示获取用户菜单响应
type GetUserMenusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// menus 表示菜单列表
	Menus []*Menu `protobuf:"bytes,1,rep,name=menus,proto3" json:"menus,omitempty"`
}

func (x *GetUserMenusResponse) Reset() {
	*x = GetUserMenusResponse{}
	mi := &file_apiserver_v1_menu_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserMenusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserMenusResponse) ProtoMessage() {}

func (x *GetUserMenusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apiserver_v1_menu_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserMenusResponse.ProtoReflect.Descriptor instead.
func (*GetUserMenusResponse) Descriptor() ([]byte, []int) {
	return file_apiserver_v1_menu_proto_rawDescGZIP(), []int{10}
}

func (x *GetUserMenusResponse) GetMenus() []*Menu {
	if x != nil {
		return x.Menus
	}
	return nil
}

// ListMenusRequest 表示获取菜单列表请求
type ListMenusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// tenant_id 表示租户ID
	// @gotags: form:"tenant_id"
	TenantId int64 `protobuf:"varint,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty" form:"tenant_id"`
	// parent_id 表示父菜单ID，0表示获取顶级菜单
	// @gotags: form:"parent_id"
	ParentId *int64 `protobuf:"varint,2,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty" form:"parent_id"`
	// menu_type 表示菜单类型过滤
	// @gotags: form:"menu_type"
	MenuType *int32 `protobuf:"varint,3,opt,name=menu_type,json=menuType,proto3,oneof" json:"menu_type,omitempty" form:"menu_type"`
	// status 表示状态过滤
	// @gotags: form:"status"
	Status *bool `protobuf:"varint,4,opt,name=status,proto3,oneof" json:"status,omitempty" form:"status"`
	// visible 表示可见性过滤
	// @gotags: form:"visible"
	Visible *bool `protobuf:"varint,5,opt,name=visible,proto3,oneof" json:"visible,omitempty" form:"visible"`
	// offset 表示偏移量
	// @gotags: form:"offset"
	Offset int64 `protobuf:"varint,6,opt,name=offset,proto3" json:"offset,omitempty" form:"offset"`
	// limit 表示每页数量
	// @gotags: form:"limit"
	Limit int64 `protobuf:"varint,7,opt,name=limit,proto3" json:"limit,omitempty" form:"limit"`
}

func (x *ListMenusRequest) Reset() {
	*x = ListMenusRequest{}
	mi := &file_apiserver_v1_menu_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListMenusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMenusRequest) ProtoMessage() {}

func (x *ListMenusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apiserver_v1_menu_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMenusRequest.ProtoReflect.Descriptor instead.
func (*ListMenusRequest) Descriptor() ([]byte, []int) {
	return file_apiserver_v1_menu_proto_rawDescGZIP(), []int{11}
}

func (x *ListMenusRequest) GetTenantId() int64 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

func (x *ListMenusRequest) GetParentId() int64 {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return 0
}

func (x *ListMenusRequest) GetMenuType() int32 {
	if x != nil && x.MenuType != nil {
		return *x.MenuType
	}
	return 0
}

func (x *ListMenusRequest) GetStatus() bool {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return false
}

func (x *ListMenusRequest) GetVisible() bool {
	if x != nil && x.Visible != nil {
		return *x.Visible
	}
	return false
}

func (x *ListMenusRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListMenusRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// ListMenusResponse 表示获取菜单列表响应
type ListMenusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// total_count 表示总数量
	TotalCount int64 `protobuf:"varint,1,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	// menus 表示菜单列表
	Menus []*Menu `protobuf:"bytes,2,rep,name=menus,proto3" json:"menus,omitempty"`
}

func (x *ListMenusResponse) Reset() {
	*x = ListMenusResponse{}
	mi := &file_apiserver_v1_menu_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListMenusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMenusResponse) ProtoMessage() {}

func (x *ListMenusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apiserver_v1_menu_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMenusResponse.ProtoReflect.Descriptor instead.
func (*ListMenusResponse) Descriptor() ([]byte, []int) {
	return file_apiserver_v1_menu_proto_rawDescGZIP(), []int{12}
}

func (x *ListMenusResponse) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *ListMenusResponse) GetMenus() []*Menu {
	if x != nil {
		return x.Menus
	}
	return nil
}

// GetMenuTreeRequest 表示获取菜单树请求
type GetMenuTreeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// tenant_id 表示租户ID
	// @gotags: form:"tenant_id"
	TenantId int64 `protobuf:"varint,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty" form:"tenant_id"`
	// only_active 表示是否只获取激活的菜单
	// @gotags: form:"only_active"
	OnlyActive bool `protobuf:"varint,2,opt,name=only_active,json=onlyActive,proto3" json:"only_active,omitempty" form:"only_active"`
	// menu_types 表示菜单类型过滤
	// @gotags: form:"menu_types"
	MenuTypes []int32 `protobuf:"varint,3,rep,packed,name=menu_types,json=menuTypes,proto3" json:"menu_types,omitempty" form:"menu_types"`
}

func (x *GetMenuTreeRequest) Reset() {
	*x = GetMenuTreeRequest{}
	mi := &file_apiserver_v1_menu_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMenuTreeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMenuTreeRequest) ProtoMessage() {}

func (x *GetMenuTreeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apiserver_v1_menu_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMenuTreeRequest.ProtoReflect.Descriptor instead.
func (*GetMenuTreeRequest) Descriptor() ([]byte, []int) {
	return file_apiserver_v1_menu_proto_rawDescGZIP(), []int{13}
}

func (x *GetMenuTreeRequest) GetTenantId() int64 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

func (x *GetMenuTreeRequest) GetOnlyActive() bool {
	if x != nil {
		return x.OnlyActive
	}
	return false
}

func (x *GetMenuTreeRequest) GetMenuTypes() []int32 {
	if x != nil {
		return x.MenuTypes
	}
	return nil
}

// GetMenuTreeResponse 表示获取菜单树响应
type GetMenuTreeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// menus 表示菜单树
	Menus []*Menu `protobuf:"bytes,1,rep,name=menus,proto3" json:"menus,omitempty"`
}

func (x *GetMenuTreeResponse) Reset() {
	*x = GetMenuTreeResponse{}
	mi := &file_apiserver_v1_menu_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMenuTreeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMenuTreeResponse) ProtoMessage() {}

func (x *GetMenuTreeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apiserver_v1_menu_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMenuTreeResponse.ProtoReflect.Descriptor instead.
func (*GetMenuTreeResponse) Descriptor() ([]byte, []int) {
	return file_apiserver_v1_menu_proto_rawDescGZIP(), []int{14}
}

func (x *GetMenuTreeResponse) GetMenus() []*Menu {
	if x != nil {
		return x.Menus
	}
	return nil
}

// MenuSortItem 表示菜单排序项
type MenuSortItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// menu_id 表示菜单ID
	MenuId int64 `protobuf:"varint,1,opt,name=menu_id,json=menuId,proto3" json:"menu_id,omitempty"`
	// sort_order 表示排序值
	SortOrder int32 `protobuf:"varint,2,opt,name=sort_order,json=sortOrder,proto3" json:"sort_order,omitempty"`
}

func (x *MenuSortItem) Reset() {
	*x = MenuSortItem{}
	mi := &file_apiserver_v1_menu_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MenuSortItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MenuSortItem) ProtoMessage() {}

func (x *MenuSortItem) ProtoReflect() protoreflect.Message {
	mi := &file_apiserver_v1_menu_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MenuSortItem.ProtoReflect.Descriptor instead.
func (*MenuSortItem) Descriptor() ([]byte, []int) {
	return file_apiserver_v1_menu_proto_rawDescGZIP(), []int{15}
}

func (x *MenuSortItem) GetMenuId() int64 {
	if x != nil {
		return x.MenuId
	}
	return 0
}

func (x *MenuSortItem) GetSortOrder() int32 {
	if x != nil {
		return x.SortOrder
	}
	return 0
}

// UpdateMenuSortRequest 表示批量更新菜单排序请求
type UpdateMenuSortRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// sort_items 表示排序项列表
	SortItems []*MenuSortItem `protobuf:"bytes,1,rep,name=sort_items,json=sortItems,proto3" json:"sort_items,omitempty"`
}

func (x *UpdateMenuSortRequest) Reset() {
	*x = UpdateMenuSortRequest{}
	mi := &file_apiserver_v1_menu_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateMenuSortRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMenuSortRequest) ProtoMessage() {}

func (x *UpdateMenuSortRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apiserver_v1_menu_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMenuSortRequest.ProtoReflect.Descriptor instead.
func (*UpdateMenuSortRequest) Descriptor() ([]byte, []int) {
	return file_apiserver_v1_menu_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateMenuSortRequest) GetSortItems() []*MenuSortItem {
	if x != nil {
		return x.SortItems
	}
	return nil
}

// UpdateMenuSortResponse 表示批量更新菜单排序响应
type UpdateMenuSortResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// success 表示是否成功
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// message 表示响应消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// updated_count 表示更新的数量
	UpdatedCount int32 `protobuf:"varint,3,opt,name=updated_count,json=updatedCount,proto3" json:"updated_count,omitempty"`
}

func (x *UpdateMenuSortResponse) Reset() {
	*x = UpdateMenuSortResponse{}
	mi := &file_apiserver_v1_menu_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateMenuSortResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMenuSortResponse) ProtoMessage() {}

func (x *UpdateMenuSortResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apiserver_v1_menu_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMenuSortResponse.ProtoReflect.Descriptor instead.
func (*UpdateMenuSortResponse) Descriptor() ([]byte, []int) {
	return file_apiserver_v1_menu_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateMenuSortResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UpdateMenuSortResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UpdateMenuSortResponse) GetUpdatedCount() int32 {
	if x != nil {
		return x.UpdatedCount
	}
	return 0
}

// CopyMenuRequest 表示复制菜单请求
type CopyMenuRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// source_menu_id 表示源菜单ID
	SourceMenuId int64 `protobuf:"varint,1,opt,name=source_menu_id,json=sourceMenuId,proto3" json:"source_menu_id,omitempty"`
	// target_tenant_id 表示目标租户ID
	TargetTenantId int64 `protobuf:"varint,2,opt,name=target_tenant_id,json=targetTenantId,proto3" json:"target_tenant_id,omitempty"`
	// target_parent_id 表示目标父菜单ID（可选）
	TargetParentId *int64 `protobuf:"varint,3,opt,name=target_parent_id,json=targetParentId,proto3,oneof" json:"target_parent_id,omitempty"`
	// new_menu_code 表示新菜单编码（可选，不指定则自动生成）
	NewMenuCode string `protobuf:"bytes,4,opt,name=new_menu_code,json=newMenuCode,proto3" json:"new_menu_code,omitempty"`
	// copy_permissions 表示是否复制权限
	CopyPermissions bool `protobuf:"varint,5,opt,name=copy_permissions,json=copyPermissions,proto3" json:"copy_permissions,omitempty"`
}

func (x *CopyMenuRequest) Reset() {
	*x = CopyMenuRequest{}
	mi := &file_apiserver_v1_menu_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CopyMenuRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyMenuRequest) ProtoMessage() {}

func (x *CopyMenuRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apiserver_v1_menu_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyMenuRequest.ProtoReflect.Descriptor instead.
func (*CopyMenuRequest) Descriptor() ([]byte, []int) {
	return file_apiserver_v1_menu_proto_rawDescGZIP(), []int{18}
}

func (x *CopyMenuRequest) GetSourceMenuId() int64 {
	if x != nil {
		return x.SourceMenuId
	}
	return 0
}

func (x *CopyMenuRequest) GetTargetTenantId() int64 {
	if x != nil {
		return x.TargetTenantId
	}
	return 0
}

func (x *CopyMenuRequest) GetTargetParentId() int64 {
	if x != nil && x.TargetParentId != nil {
		return *x.TargetParentId
	}
	return 0
}

func (x *CopyMenuRequest) GetNewMenuCode() string {
	if x != nil {
		return x.NewMenuCode
	}
	return ""
}

func (x *CopyMenuRequest) GetCopyPermissions() bool {
	if x != nil {
		return x.CopyPermissions
	}
	return false
}

// CopyMenuResponse 表示复制菜单响应
type CopyMenuResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// new_menu_id 表示新菜单ID
	NewMenuId int64 `protobuf:"varint,1,opt,name=new_menu_id,json=newMenuId,proto3" json:"new_menu_id,omitempty"`
	// message 表示响应消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CopyMenuResponse) Reset() {
	*x = CopyMenuResponse{}
	mi := &file_apiserver_v1_menu_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CopyMenuResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyMenuResponse) ProtoMessage() {}

func (x *CopyMenuResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apiserver_v1_menu_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyMenuResponse.ProtoReflect.Descriptor instead.
func (*CopyMenuResponse) Descriptor() ([]byte, []int) {
	return file_apiserver_v1_menu_proto_rawDescGZIP(), []int{19}
}

func (x *CopyMenuResponse) GetNewMenuId() int64 {
	if x != nil {
		return x.NewMenuId
	}
	return 0
}

func (x *CopyMenuResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// MoveMenuRequest 表示移动菜单请求
type MoveMenuRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// menu_id 表示菜单ID
	MenuId int64 `protobuf:"varint,1,opt,name=menu_id,json=menuId,proto3" json:"menu_id,omitempty"`
	// new_parent_id 表示新父菜单ID（可选）
	NewParentId *int64 `protobuf:"varint,2,opt,name=new_parent_id,json=newParentId,proto3,oneof" json:"new_parent_id,omitempty"`
	// new_sort_order 表示新排序值（可选）
	NewSortOrder *int32 `protobuf:"varint,3,opt,name=new_sort_order,json=newSortOrder,proto3,oneof" json:"new_sort_order,omitempty"`
}

func (x *MoveMenuRequest) Reset() {
	*x = MoveMenuRequest{}
	mi := &file_apiserver_v1_menu_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MoveMenuRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveMenuRequest) ProtoMessage() {}

func (x *MoveMenuRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apiserver_v1_menu_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveMenuRequest.ProtoReflect.Descriptor instead.
func (*MoveMenuRequest) Descriptor() ([]byte, []int) {
	return file_apiserver_v1_menu_proto_rawDescGZIP(), []int{20}
}

func (x *MoveMenuRequest) GetMenuId() int64 {
	if x != nil {
		return x.MenuId
	}
	return 0
}

func (x *MoveMenuRequest) GetNewParentId() int64 {
	if x != nil && x.NewParentId != nil {
		return *x.NewParentId
	}
	return 0
}

func (x *MoveMenuRequest) GetNewSortOrder() int32 {
	if x != nil && x.NewSortOrder != nil {
		return *x.NewSortOrder
	}
	return 0
}

// MoveMenuResponse 表示移动菜单响应
type MoveMenuResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// success 表示是否成功
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// message 表示响应消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *MoveMenuResponse) Reset() {
	*x = MoveMenuResponse{}
	mi := &file_apiserver_v1_menu_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MoveMenuResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveMenuResponse) ProtoMessage() {}

func (x *MoveMenuResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apiserver_v1_menu_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveMenuResponse.ProtoReflect.Descriptor instead.
func (*MoveMenuResponse) Descriptor() ([]byte, []int) {
	return file_apiserver_v1_menu_proto_rawDescGZIP(), []int{21}
}

func (x *MoveMenuResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *MoveMenuResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_apiserver_v1_menu_proto protoreflect.FileDescriptor

var file_apiserver_v1_menu_proto_rawDesc = []byte{
	0x0a, 0x17, 0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6d,
	0x65, 0x6e, 0x75, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x76, 0x31, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbf,
	0x04, 0x0a, 0x04, 0x4d, 0x65, 0x6e, 0x75, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6e, 0x75, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x6e, 0x75, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x69, 0x50, 0x61, 0x74, 0x68, 0x12, 0x21,
	0x0a, 0x0c, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x61, 0x75, 0x74,
	0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x41, 0x75, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6e, 0x75, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x65, 0x6e, 0x75, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e,
	0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6e, 0x75,
	0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x22, 0xd7, 0x02, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6e, 0x75, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x6e, 0x75, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x69, 0x63, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6e, 0x75, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x65, 0x6e, 0x75, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x47, 0x0a, 0x12, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x6d, 0x65, 0x6e, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x6d, 0x65, 0x6e, 0x75, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0xf3, 0x03, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65,
	0x6e, 0x75, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x65, 0x6e,
	0x75, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x65, 0x6e, 0x75,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6e, 0x75, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x6e, 0x75, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x50, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02,
	0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17,
	0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x04,
	0x69, 0x63, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x09, 0x73,
	0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x6d,
	0x65, 0x6e, 0x75, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05,
	0x52, 0x08, 0x6d, 0x65, 0x6e, 0x75, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a,
	0x07, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x06,
	0x52, 0x07, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x07, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x06, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73,
	0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6d, 0x65,
	0x6e, 0x75, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x76, 0x69, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x48, 0x0a, 0x12, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x42, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x6e,
	0x75, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x65, 0x6e, 0x75,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x65, 0x6e, 0x75, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x22, 0x48, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x29, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x65, 0x6e, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x65, 0x6e, 0x75, 0x49, 0x64, 0x22, 0x2f, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1c, 0x0a, 0x04, 0x6d, 0x65, 0x6e, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x04, 0x6d, 0x65, 0x6e, 0x75, 0x22, 0x32, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x6e, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x22, 0x36, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x6e, 0x75,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x05, 0x6d, 0x65, 0x6e,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65,
	0x6e, 0x75, 0x52, 0x05, 0x6d, 0x65, 0x6e, 0x75, 0x73, 0x22, 0x90, 0x02, 0x0a, 0x10, 0x4c, 0x69,
	0x73, 0x74, 0x4d, 0x65, 0x6e, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x09, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00,
	0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a,
	0x09, 0x6d, 0x65, 0x6e, 0x75, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x01, 0x52, 0x08, 0x6d, 0x65, 0x6e, 0x75, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x02, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07,
	0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52,
	0x07, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6d, 0x65, 0x6e, 0x75,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x22, 0x54, 0x0a, 0x11,
	0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x6e, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x05, 0x6d, 0x65, 0x6e, 0x75, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x08, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x05, 0x6d, 0x65, 0x6e,
	0x75, 0x73, 0x22, 0x71, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6e, 0x75, 0x54, 0x72, 0x65,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6f, 0x6e, 0x6c, 0x79,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x6e, 0x75, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x65, 0x6e, 0x75,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0x35, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6e, 0x75,
	0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x05,
	0x6d, 0x65, 0x6e, 0x75, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x05, 0x6d, 0x65, 0x6e, 0x75, 0x73, 0x22, 0x46, 0x0a, 0x0c,
	0x4d, 0x65, 0x6e, 0x75, 0x53, 0x6f, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x17, 0x0a, 0x07,
	0x6d, 0x65, 0x6e, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d,
	0x65, 0x6e, 0x75, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x22, 0x48, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65,
	0x6e, 0x75, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a,
	0x0a, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6e, 0x75, 0x53, 0x6f, 0x72, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x71,
	0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x53, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0xf4, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x70, 0x79, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x6d, 0x65, 0x6e, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x00, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x65, 0x77, 0x5f, 0x6d, 0x65, 0x6e, 0x75,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x77,
	0x4d, 0x65, 0x6e, 0x75, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x70, 0x79,
	0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x63, 0x6f, 0x70, 0x79, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x22, 0x4c, 0x0a, 0x10, 0x43, 0x6f, 0x70, 0x79,
	0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0b,
	0x6e, 0x65, 0x77, 0x5f, 0x6d, 0x65, 0x6e, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x4d, 0x65, 0x6e, 0x75, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xa3, 0x01, 0x0a, 0x0f, 0x4d, 0x6f, 0x76, 0x65, 0x4d,
	0x65, 0x6e, 0x75, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x65,
	0x6e, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x65, 0x6e,
	0x75, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0d, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0b, 0x6e, 0x65,
	0x77, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e,
	0x6e, 0x65, 0x77, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x53, 0x6f, 0x72, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6e, 0x65, 0x77, 0x5f,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6e, 0x65,
	0x77, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x46, 0x0a, 0x10,
	0x4d, 0x6f, 0x76, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x42, 0x37, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x61, 0x73, 0x68, 0x77, 0x69, 0x6e, 0x79, 0x75, 0x65, 0x2f, 0x6f, 0x6e, 0x65,
	0x2d, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_apiserver_v1_menu_proto_rawDescOnce sync.Once
	file_apiserver_v1_menu_proto_rawDescData = file_apiserver_v1_menu_proto_rawDesc
)

func file_apiserver_v1_menu_proto_rawDescGZIP() []byte {
	file_apiserver_v1_menu_proto_rawDescOnce.Do(func() {
		file_apiserver_v1_menu_proto_rawDescData = protoimpl.X.CompressGZIP(file_apiserver_v1_menu_proto_rawDescData)
	})
	return file_apiserver_v1_menu_proto_rawDescData
}

var file_apiserver_v1_menu_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_apiserver_v1_menu_proto_goTypes = []any{
	(*Menu)(nil),                   // 0: v1.Menu
	(*CreateMenuRequest)(nil),      // 1: v1.CreateMenuRequest
	(*CreateMenuResponse)(nil),     // 2: v1.CreateMenuResponse
	(*UpdateMenuRequest)(nil),      // 3: v1.UpdateMenuRequest
	(*UpdateMenuResponse)(nil),     // 4: v1.UpdateMenuResponse
	(*DeleteMenuRequest)(nil),      // 5: v1.DeleteMenuRequest
	(*DeleteMenuResponse)(nil),     // 6: v1.DeleteMenuResponse
	(*GetMenuRequest)(nil),         // 7: v1.GetMenuRequest
	(*GetMenuResponse)(nil),        // 8: v1.GetMenuResponse
	(*GetUserMenusRequest)(nil),    // 9: v1.GetUserMenusRequest
	(*GetUserMenusResponse)(nil),   // 10: v1.GetUserMenusResponse
	(*ListMenusRequest)(nil),       // 11: v1.ListMenusRequest
	(*ListMenusResponse)(nil),      // 12: v1.ListMenusResponse
	(*GetMenuTreeRequest)(nil),     // 13: v1.GetMenuTreeRequest
	(*GetMenuTreeResponse)(nil),    // 14: v1.GetMenuTreeResponse
	(*MenuSortItem)(nil),           // 15: v1.MenuSortItem
	(*UpdateMenuSortRequest)(nil),  // 16: v1.UpdateMenuSortRequest
	(*UpdateMenuSortResponse)(nil), // 17: v1.UpdateMenuSortResponse
	(*CopyMenuRequest)(nil),        // 18: v1.CopyMenuRequest
	(*CopyMenuResponse)(nil),       // 19: v1.CopyMenuResponse
	(*MoveMenuRequest)(nil),        // 20: v1.MoveMenuRequest
	(*MoveMenuResponse)(nil),       // 21: v1.MoveMenuResponse
	(*timestamppb.Timestamp)(nil),  // 22: google.protobuf.Timestamp
}
var file_apiserver_v1_menu_proto_depIdxs = []int32{
	0,  // 0: v1.Menu.children:type_name -> v1.Menu
	22, // 1: v1.Menu.created_at:type_name -> google.protobuf.Timestamp
	22, // 2: v1.Menu.updated_at:type_name -> google.protobuf.Timestamp
	0,  // 3: v1.GetMenuResponse.menu:type_name -> v1.Menu
	0,  // 4: v1.GetUserMenusResponse.menus:type_name -> v1.Menu
	0,  // 5: v1.ListMenusResponse.menus:type_name -> v1.Menu
	0,  // 6: v1.GetMenuTreeResponse.menus:type_name -> v1.Menu
	15, // 7: v1.UpdateMenuSortRequest.sort_items:type_name -> v1.MenuSortItem
	8,  // [8:8] is the sub-list for method output_type
	8,  // [8:8] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_apiserver_v1_menu_proto_init() }
func file_apiserver_v1_menu_proto_init() {
	if File_apiserver_v1_menu_proto != nil {
		return
	}
	file_apiserver_v1_menu_proto_msgTypes[3].OneofWrappers = []any{}
	file_apiserver_v1_menu_proto_msgTypes[11].OneofWrappers = []any{}
	file_apiserver_v1_menu_proto_msgTypes[18].OneofWrappers = []any{}
	file_apiserver_v1_menu_proto_msgTypes[20].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_apiserver_v1_menu_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_apiserver_v1_menu_proto_goTypes,
		DependencyIndexes: file_apiserver_v1_menu_proto_depIdxs,
		MessageInfos:      file_apiserver_v1_menu_proto_msgTypes,
	}.Build()
	File_apiserver_v1_menu_proto = out.File
	file_apiserver_v1_menu_proto_rawDesc = nil
	file_apiserver_v1_menu_proto_goTypes = nil
	file_apiserver_v1_menu_proto_depIdxs = nil
}
