// Copyright 2024 孔令飞 <colin404@foxmail.com>. All rights reserved.
// Use of this source code is governed by a MIT style
// license that can be found in the LICENSE file. The original repo for
// this file is https://github.com/ashwinyue/one-auth. The professional
// version of this repository is https://github.com/onexstack/onex.

// 菜单权限管理 API 定义

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.1
// source: apiserver/v1/menu_permission.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// MenuPermission 表示菜单权限关联信息
type MenuPermission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id 表示关联记录ID
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// tenant_id 表示租户ID
	TenantId int64 `protobuf:"varint,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// menu_id 表示菜单ID
	MenuId int64 `protobuf:"varint,3,opt,name=menu_id,json=menuId,proto3" json:"menu_id,omitempty"`
	// permission_id 表示权限ID
	PermissionId int64 `protobuf:"varint,4,opt,name=permission_id,json=permissionId,proto3" json:"permission_id,omitempty"`
	// is_required 表示是否为必需权限
	IsRequired bool `protobuf:"varint,5,opt,name=is_required,json=isRequired,proto3" json:"is_required,omitempty"`
	// created_at 表示创建时间
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// updated_at 表示更新时间
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *MenuPermission) Reset() {
	*x = MenuPermission{}
	mi := &file_apiserver_v1_menu_permission_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MenuPermission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MenuPermission) ProtoMessage() {}

func (x *MenuPermission) ProtoReflect() protoreflect.Message {
	mi := &file_apiserver_v1_menu_permission_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MenuPermission.ProtoReflect.Descriptor instead.
func (*MenuPermission) Descriptor() ([]byte, []int) {
	return file_apiserver_v1_menu_permission_proto_rawDescGZIP(), []int{0}
}

func (x *MenuPermission) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MenuPermission) GetTenantId() int64 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

func (x *MenuPermission) GetMenuId() int64 {
	if x != nil {
		return x.MenuId
	}
	return 0
}

func (x *MenuPermission) GetPermissionId() int64 {
	if x != nil {
		return x.PermissionId
	}
	return 0
}

func (x *MenuPermission) GetIsRequired() bool {
	if x != nil {
		return x.IsRequired
	}
	return false
}

func (x *MenuPermission) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *MenuPermission) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

// PermissionConfig 权限配置
type PermissionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// permission_id 权限ID（优先使用）
	PermissionId int64 `protobuf:"varint,1,opt,name=permission_id,json=permissionId,proto3" json:"permission_id,omitempty"`
	// permission_name 权限名称（用于查找或创建）
	PermissionName string `protobuf:"bytes,2,opt,name=permission_name,json=permissionName,proto3" json:"permission_name,omitempty"`
	// is_required 是否为必需权限
	IsRequired bool `protobuf:"varint,3,opt,name=is_required,json=isRequired,proto3" json:"is_required,omitempty"`
	// auto_create 如果权限不存在是否自动创建
	AutoCreate bool `protobuf:"varint,4,opt,name=auto_create,json=autoCreate,proto3" json:"auto_create,omitempty"`
}

func (x *PermissionConfig) Reset() {
	*x = PermissionConfig{}
	mi := &file_apiserver_v1_menu_permission_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PermissionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionConfig) ProtoMessage() {}

func (x *PermissionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_apiserver_v1_menu_permission_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionConfig.ProtoReflect.Descriptor instead.
func (*PermissionConfig) Descriptor() ([]byte, []int) {
	return file_apiserver_v1_menu_permission_proto_rawDescGZIP(), []int{1}
}

func (x *PermissionConfig) GetPermissionId() int64 {
	if x != nil {
		return x.PermissionId
	}
	return 0
}

func (x *PermissionConfig) GetPermissionName() string {
	if x != nil {
		return x.PermissionName
	}
	return ""
}

func (x *PermissionConfig) GetIsRequired() bool {
	if x != nil {
		return x.IsRequired
	}
	return false
}

func (x *PermissionConfig) GetAutoCreate() bool {
	if x != nil {
		return x.AutoCreate
	}
	return false
}

// MenuWithPermissions 带权限的菜单
type MenuWithPermissions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// menu_id 菜单ID
	MenuId int64 `protobuf:"varint,1,opt,name=menu_id,json=menuId,proto3" json:"menu_id,omitempty"`
	// title 菜单标题
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// permissions 所有权限
	Permissions []*Permission `protobuf:"bytes,3,rep,name=permissions,proto3" json:"permissions,omitempty"`
	// required_permissions 必需权限
	RequiredPermissions []*Permission `protobuf:"bytes,4,rep,name=required_permissions,json=requiredPermissions,proto3" json:"required_permissions,omitempty"`
	// available_actions 可执行的操作
	AvailableActions []string `protobuf:"bytes,5,rep,name=available_actions,json=availableActions,proto3" json:"available_actions,omitempty"`
}

func (x *MenuWithPermissions) Reset() {
	*x = MenuWithPermissions{}
	mi := &file_apiserver_v1_menu_permission_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MenuWithPermissions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MenuWithPermissions) ProtoMessage() {}

func (x *MenuWithPermissions) ProtoReflect() protoreflect.Message {
	mi := &file_apiserver_v1_menu_permission_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MenuWithPermissions.ProtoReflect.Descriptor instead.
func (*MenuWithPermissions) Descriptor() ([]byte, []int) {
	return file_apiserver_v1_menu_permission_proto_rawDescGZIP(), []int{2}
}

func (x *MenuWithPermissions) GetMenuId() int64 {
	if x != nil {
		return x.MenuId
	}
	return 0
}

func (x *MenuWithPermissions) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *MenuWithPermissions) GetPermissions() []*Permission {
	if x != nil {
		return x.Permissions
	}
	return nil
}

func (x *MenuWithPermissions) GetRequiredPermissions() []*Permission {
	if x != nil {
		return x.RequiredPermissions
	}
	return nil
}

func (x *MenuWithPermissions) GetAvailableActions() []string {
	if x != nil {
		return x.AvailableActions
	}
	return nil
}

// ConfigureMenuPermissionsRequest 配置菜单权限请求
type ConfigureMenuPermissionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// menu_id 菜单ID
	MenuId int64 `protobuf:"varint,1,opt,name=menu_id,json=menuId,proto3" json:"menu_id,omitempty"`
	// permissions 权限配置列表
	Permissions []*PermissionConfig `protobuf:"bytes,2,rep,name=permissions,proto3" json:"permissions,omitempty"`
}

func (x *ConfigureMenuPermissionsRequest) Reset() {
	*x = ConfigureMenuPermissionsRequest{}
	mi := &file_apiserver_v1_menu_permission_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigureMenuPermissionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigureMenuPermissionsRequest) ProtoMessage() {}

func (x *ConfigureMenuPermissionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apiserver_v1_menu_permission_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigureMenuPermissionsRequest.ProtoReflect.Descriptor instead.
func (*ConfigureMenuPermissionsRequest) Descriptor() ([]byte, []int) {
	return file_apiserver_v1_menu_permission_proto_rawDescGZIP(), []int{3}
}

func (x *ConfigureMenuPermissionsRequest) GetMenuId() int64 {
	if x != nil {
		return x.MenuId
	}
	return 0
}

func (x *ConfigureMenuPermissionsRequest) GetPermissions() []*PermissionConfig {
	if x != nil {
		return x.Permissions
	}
	return nil
}

// ConfigureMenuPermissionsResponse 配置菜单权限响应
type ConfigureMenuPermissionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// success 是否成功
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// message 响应消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// affected_count 影响的记录数
	AffectedCount int32 `protobuf:"varint,3,opt,name=affected_count,json=affectedCount,proto3" json:"affected_count,omitempty"`
}

func (x *ConfigureMenuPermissionsResponse) Reset() {
	*x = ConfigureMenuPermissionsResponse{}
	mi := &file_apiserver_v1_menu_permission_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigureMenuPermissionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigureMenuPermissionsResponse) ProtoMessage() {}

func (x *ConfigureMenuPermissionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apiserver_v1_menu_permission_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigureMenuPermissionsResponse.ProtoReflect.Descriptor instead.
func (*ConfigureMenuPermissionsResponse) Descriptor() ([]byte, []int) {
	return file_apiserver_v1_menu_permission_proto_rawDescGZIP(), []int{4}
}

func (x *ConfigureMenuPermissionsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ConfigureMenuPermissionsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ConfigureMenuPermissionsResponse) GetAffectedCount() int32 {
	if x != nil {
		return x.AffectedCount
	}
	return 0
}

// GetMenuPermissionsRequest 获取菜单权限请求
type GetMenuPermissionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// menu_id 菜单ID
	MenuId int64 `protobuf:"varint,1,opt,name=menu_id,json=menuId,proto3" json:"menu_id,omitempty"`
	// include_optional 是否包含可选权限
	IncludeOptional bool `protobuf:"varint,2,opt,name=include_optional,json=includeOptional,proto3" json:"include_optional,omitempty"`
}

func (x *GetMenuPermissionsRequest) Reset() {
	*x = GetMenuPermissionsRequest{}
	mi := &file_apiserver_v1_menu_permission_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMenuPermissionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMenuPermissionsRequest) ProtoMessage() {}

func (x *GetMenuPermissionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apiserver_v1_menu_permission_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMenuPermissionsRequest.ProtoReflect.Descriptor instead.
func (*GetMenuPermissionsRequest) Descriptor() ([]byte, []int) {
	return file_apiserver_v1_menu_permission_proto_rawDescGZIP(), []int{5}
}

func (x *GetMenuPermissionsRequest) GetMenuId() int64 {
	if x != nil {
		return x.MenuId
	}
	return 0
}

func (x *GetMenuPermissionsRequest) GetIncludeOptional() bool {
	if x != nil {
		return x.IncludeOptional
	}
	return false
}

// GetMenuPermissionsResponse 获取菜单权限响应
type GetMenuPermissionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// menu_id 菜单ID
	MenuId int64 `protobuf:"varint,1,opt,name=menu_id,json=menuId,proto3" json:"menu_id,omitempty"`
	// all_permissions 所有权限
	AllPermissions []*Permission `protobuf:"bytes,2,rep,name=all_permissions,json=allPermissions,proto3" json:"all_permissions,omitempty"`
	// required_permissions 必需权限
	RequiredPermissions []*Permission `protobuf:"bytes,3,rep,name=required_permissions,json=requiredPermissions,proto3" json:"required_permissions,omitempty"`
	// optional_permissions 可选权限
	OptionalPermissions []*Permission `protobuf:"bytes,4,rep,name=optional_permissions,json=optionalPermissions,proto3" json:"optional_permissions,omitempty"`
}

func (x *GetMenuPermissionsResponse) Reset() {
	*x = GetMenuPermissionsResponse{}
	mi := &file_apiserver_v1_menu_permission_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMenuPermissionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMenuPermissionsResponse) ProtoMessage() {}

func (x *GetMenuPermissionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apiserver_v1_menu_permission_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMenuPermissionsResponse.ProtoReflect.Descriptor instead.
func (*GetMenuPermissionsResponse) Descriptor() ([]byte, []int) {
	return file_apiserver_v1_menu_permission_proto_rawDescGZIP(), []int{6}
}

func (x *GetMenuPermissionsResponse) GetMenuId() int64 {
	if x != nil {
		return x.MenuId
	}
	return 0
}

func (x *GetMenuPermissionsResponse) GetAllPermissions() []*Permission {
	if x != nil {
		return x.AllPermissions
	}
	return nil
}

func (x *GetMenuPermissionsResponse) GetRequiredPermissions() []*Permission {
	if x != nil {
		return x.RequiredPermissions
	}
	return nil
}

func (x *GetMenuPermissionsResponse) GetOptionalPermissions() []*Permission {
	if x != nil {
		return x.OptionalPermissions
	}
	return nil
}

// GetPermissionMenusRequest 获取权限关联菜单请求
type GetPermissionMenusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// permission_id 权限ID
	PermissionId int64 `protobuf:"varint,1,opt,name=permission_id,json=permissionId,proto3" json:"permission_id,omitempty"`
}

func (x *GetPermissionMenusRequest) Reset() {
	*x = GetPermissionMenusRequest{}
	mi := &file_apiserver_v1_menu_permission_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPermissionMenusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPermissionMenusRequest) ProtoMessage() {}

func (x *GetPermissionMenusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apiserver_v1_menu_permission_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPermissionMenusRequest.ProtoReflect.Descriptor instead.
func (*GetPermissionMenusRequest) Descriptor() ([]byte, []int) {
	return file_apiserver_v1_menu_permission_proto_rawDescGZIP(), []int{7}
}

func (x *GetPermissionMenusRequest) GetPermissionId() int64 {
	if x != nil {
		return x.PermissionId
	}
	return 0
}

// GetPermissionMenusResponse 获取权限关联菜单响应
type GetPermissionMenusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// permission_id 权限ID
	PermissionId int64 `protobuf:"varint,1,opt,name=permission_id,json=permissionId,proto3" json:"permission_id,omitempty"`
	// menus 关联的菜单列表
	Menus []*MenuWithPermissions `protobuf:"bytes,2,rep,name=menus,proto3" json:"menus,omitempty"`
}

func (x *GetPermissionMenusResponse) Reset() {
	*x = GetPermissionMenusResponse{}
	mi := &file_apiserver_v1_menu_permission_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPermissionMenusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPermissionMenusResponse) ProtoMessage() {}

func (x *GetPermissionMenusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apiserver_v1_menu_permission_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPermissionMenusResponse.ProtoReflect.Descriptor instead.
func (*GetPermissionMenusResponse) Descriptor() ([]byte, []int) {
	return file_apiserver_v1_menu_permission_proto_rawDescGZIP(), []int{8}
}

func (x *GetPermissionMenusResponse) GetPermissionId() int64 {
	if x != nil {
		return x.PermissionId
	}
	return 0
}

func (x *GetPermissionMenusResponse) GetMenus() []*MenuWithPermissions {
	if x != nil {
		return x.Menus
	}
	return nil
}

// GetUserMenuPermissionsRequest 获取用户菜单权限请求
type GetUserMenuPermissionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// user_id 用户ID（可选，不传则获取当前用户）
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// tenant_id 租户ID
	TenantId int64 `protobuf:"varint,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// include_actions 是否包含可执行操作列表
	IncludeActions bool `protobuf:"varint,3,opt,name=include_actions,json=includeActions,proto3" json:"include_actions,omitempty"`
}

func (x *GetUserMenuPermissionsRequest) Reset() {
	*x = GetUserMenuPermissionsRequest{}
	mi := &file_apiserver_v1_menu_permission_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserMenuPermissionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserMenuPermissionsRequest) ProtoMessage() {}

func (x *GetUserMenuPermissionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apiserver_v1_menu_permission_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserMenuPermissionsRequest.ProtoReflect.Descriptor instead.
func (*GetUserMenuPermissionsRequest) Descriptor() ([]byte, []int) {
	return file_apiserver_v1_menu_permission_proto_rawDescGZIP(), []int{9}
}

func (x *GetUserMenuPermissionsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetUserMenuPermissionsRequest) GetTenantId() int64 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

func (x *GetUserMenuPermissionsRequest) GetIncludeActions() bool {
	if x != nil {
		return x.IncludeActions
	}
	return false
}

// GetUserMenuPermissionsResponse 获取用户菜单权限响应
type GetUserMenuPermissionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// user_id 用户ID
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// tenant_id 租户ID
	TenantId int64 `protobuf:"varint,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// accessible_menus 可访问的菜单
	AccessibleMenus []*MenuWithPermissions `protobuf:"bytes,3,rep,name=accessible_menus,json=accessibleMenus,proto3" json:"accessible_menus,omitempty"`
	// total_menu_count 总菜单数
	TotalMenuCount int32 `protobuf:"varint,4,opt,name=total_menu_count,json=totalMenuCount,proto3" json:"total_menu_count,omitempty"`
	// accessible_menu_count 可访问菜单数
	AccessibleMenuCount int32 `protobuf:"varint,5,opt,name=accessible_menu_count,json=accessibleMenuCount,proto3" json:"accessible_menu_count,omitempty"`
}

func (x *GetUserMenuPermissionsResponse) Reset() {
	*x = GetUserMenuPermissionsResponse{}
	mi := &file_apiserver_v1_menu_permission_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserMenuPermissionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserMenuPermissionsResponse) ProtoMessage() {}

func (x *GetUserMenuPermissionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apiserver_v1_menu_permission_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserMenuPermissionsResponse.ProtoReflect.Descriptor instead.
func (*GetUserMenuPermissionsResponse) Descriptor() ([]byte, []int) {
	return file_apiserver_v1_menu_permission_proto_rawDescGZIP(), []int{10}
}

func (x *GetUserMenuPermissionsResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetUserMenuPermissionsResponse) GetTenantId() int64 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

func (x *GetUserMenuPermissionsResponse) GetAccessibleMenus() []*MenuWithPermissions {
	if x != nil {
		return x.AccessibleMenus
	}
	return nil
}

func (x *GetUserMenuPermissionsResponse) GetTotalMenuCount() int32 {
	if x != nil {
		return x.TotalMenuCount
	}
	return 0
}

func (x *GetUserMenuPermissionsResponse) GetAccessibleMenuCount() int32 {
	if x != nil {
		return x.AccessibleMenuCount
	}
	return 0
}

// ValidateMenuAccessRequest 验证菜单访问权限请求
type ValidateMenuAccessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// menu_id 菜单ID
	MenuId int64 `protobuf:"varint,1,opt,name=menu_id,json=menuId,proto3" json:"menu_id,omitempty"`
	// user_id 用户ID（可选，不传则验证当前用户）
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// tenant_id 租户ID
	TenantId int64 `protobuf:"varint,3,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// required_action 需要的操作权限
	RequiredAction string `protobuf:"bytes,4,opt,name=required_action,json=requiredAction,proto3" json:"required_action,omitempty"`
}

func (x *ValidateMenuAccessRequest) Reset() {
	*x = ValidateMenuAccessRequest{}
	mi := &file_apiserver_v1_menu_permission_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateMenuAccessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateMenuAccessRequest) ProtoMessage() {}

func (x *ValidateMenuAccessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apiserver_v1_menu_permission_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateMenuAccessRequest.ProtoReflect.Descriptor instead.
func (*ValidateMenuAccessRequest) Descriptor() ([]byte, []int) {
	return file_apiserver_v1_menu_permission_proto_rawDescGZIP(), []int{11}
}

func (x *ValidateMenuAccessRequest) GetMenuId() int64 {
	if x != nil {
		return x.MenuId
	}
	return 0
}

func (x *ValidateMenuAccessRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ValidateMenuAccessRequest) GetTenantId() int64 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

func (x *ValidateMenuAccessRequest) GetRequiredAction() string {
	if x != nil {
		return x.RequiredAction
	}
	return ""
}

// ValidateMenuAccessResponse 验证菜单访问权限响应
type ValidateMenuAccessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// has_access 是否有访问权限
	HasAccess bool `protobuf:"varint,1,opt,name=has_access,json=hasAccess,proto3" json:"has_access,omitempty"`
	// missing_permissions 缺少的权限
	MissingPermissions []string `protobuf:"bytes,2,rep,name=missing_permissions,json=missingPermissions,proto3" json:"missing_permissions,omitempty"`
	// available_actions 可执行的操作
	AvailableActions []string `protobuf:"bytes,3,rep,name=available_actions,json=availableActions,proto3" json:"available_actions,omitempty"`
	// message 说明消息
	Message string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ValidateMenuAccessResponse) Reset() {
	*x = ValidateMenuAccessResponse{}
	mi := &file_apiserver_v1_menu_permission_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateMenuAccessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateMenuAccessResponse) ProtoMessage() {}

func (x *ValidateMenuAccessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apiserver_v1_menu_permission_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateMenuAccessResponse.ProtoReflect.Descriptor instead.
func (*ValidateMenuAccessResponse) Descriptor() ([]byte, []int) {
	return file_apiserver_v1_menu_permission_proto_rawDescGZIP(), []int{12}
}

func (x *ValidateMenuAccessResponse) GetHasAccess() bool {
	if x != nil {
		return x.HasAccess
	}
	return false
}

func (x *ValidateMenuAccessResponse) GetMissingPermissions() []string {
	if x != nil {
		return x.MissingPermissions
	}
	return nil
}

func (x *ValidateMenuAccessResponse) GetAvailableActions() []string {
	if x != nil {
		return x.AvailableActions
	}
	return nil
}

func (x *ValidateMenuAccessResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// BatchConfigureMenuPermissionsRequest 批量配置菜单权限请求
type BatchConfigureMenuPermissionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// configurations 菜单权限配置
	Configurations []*MenuPermissionBatch `protobuf:"bytes,1,rep,name=configurations,proto3" json:"configurations,omitempty"`
	// clear_existing 是否清除现有配置
	ClearExisting bool `protobuf:"varint,2,opt,name=clear_existing,json=clearExisting,proto3" json:"clear_existing,omitempty"`
}

func (x *BatchConfigureMenuPermissionsRequest) Reset() {
	*x = BatchConfigureMenuPermissionsRequest{}
	mi := &file_apiserver_v1_menu_permission_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchConfigureMenuPermissionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchConfigureMenuPermissionsRequest) ProtoMessage() {}

func (x *BatchConfigureMenuPermissionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apiserver_v1_menu_permission_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchConfigureMenuPermissionsRequest.ProtoReflect.Descriptor instead.
func (*BatchConfigureMenuPermissionsRequest) Descriptor() ([]byte, []int) {
	return file_apiserver_v1_menu_permission_proto_rawDescGZIP(), []int{13}
}

func (x *BatchConfigureMenuPermissionsRequest) GetConfigurations() []*MenuPermissionBatch {
	if x != nil {
		return x.Configurations
	}
	return nil
}

func (x *BatchConfigureMenuPermissionsRequest) GetClearExisting() bool {
	if x != nil {
		return x.ClearExisting
	}
	return false
}

// MenuPermissionBatch 菜单权限批量配置
type MenuPermissionBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// menu_id 菜单ID
	MenuId int64 `protobuf:"varint,1,opt,name=menu_id,json=menuId,proto3" json:"menu_id,omitempty"`
	// permissions 权限配置
	Permissions []*PermissionConfig `protobuf:"bytes,2,rep,name=permissions,proto3" json:"permissions,omitempty"`
}

func (x *MenuPermissionBatch) Reset() {
	*x = MenuPermissionBatch{}
	mi := &file_apiserver_v1_menu_permission_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MenuPermissionBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MenuPermissionBatch) ProtoMessage() {}

func (x *MenuPermissionBatch) ProtoReflect() protoreflect.Message {
	mi := &file_apiserver_v1_menu_permission_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MenuPermissionBatch.ProtoReflect.Descriptor instead.
func (*MenuPermissionBatch) Descriptor() ([]byte, []int) {
	return file_apiserver_v1_menu_permission_proto_rawDescGZIP(), []int{14}
}

func (x *MenuPermissionBatch) GetMenuId() int64 {
	if x != nil {
		return x.MenuId
	}
	return 0
}

func (x *MenuPermissionBatch) GetPermissions() []*PermissionConfig {
	if x != nil {
		return x.Permissions
	}
	return nil
}

// BatchConfigureMenuPermissionsResponse 批量配置菜单权限响应
type BatchConfigureMenuPermissionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// success 是否成功
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// message 响应消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// processed_count 处理的菜单数
	ProcessedCount int32 `protobuf:"varint,3,opt,name=processed_count,json=processedCount,proto3" json:"processed_count,omitempty"`
	// error_count 错误数量
	ErrorCount int32 `protobuf:"varint,4,opt,name=error_count,json=errorCount,proto3" json:"error_count,omitempty"`
	// errors 错误详情
	Errors []string `protobuf:"bytes,5,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *BatchConfigureMenuPermissionsResponse) Reset() {
	*x = BatchConfigureMenuPermissionsResponse{}
	mi := &file_apiserver_v1_menu_permission_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchConfigureMenuPermissionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchConfigureMenuPermissionsResponse) ProtoMessage() {}

func (x *BatchConfigureMenuPermissionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apiserver_v1_menu_permission_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchConfigureMenuPermissionsResponse.ProtoReflect.Descriptor instead.
func (*BatchConfigureMenuPermissionsResponse) Descriptor() ([]byte, []int) {
	return file_apiserver_v1_menu_permission_proto_rawDescGZIP(), []int{15}
}

func (x *BatchConfigureMenuPermissionsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *BatchConfigureMenuPermissionsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *BatchConfigureMenuPermissionsResponse) GetProcessedCount() int32 {
	if x != nil {
		return x.ProcessedCount
	}
	return 0
}

func (x *BatchConfigureMenuPermissionsResponse) GetErrorCount() int32 {
	if x != nil {
		return x.ErrorCount
	}
	return 0
}

func (x *BatchConfigureMenuPermissionsResponse) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

// GetMenuPermissionMatrixRequest 获取菜单权限矩阵请求
type GetMenuPermissionMatrixRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// tenant_id 租户ID
	TenantId int64 `protobuf:"varint,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// menu_types 菜单类型过滤
	MenuTypes []int32 `protobuf:"varint,2,rep,packed,name=menu_types,json=menuTypes,proto3" json:"menu_types,omitempty"`
}

func (x *GetMenuPermissionMatrixRequest) Reset() {
	*x = GetMenuPermissionMatrixRequest{}
	mi := &file_apiserver_v1_menu_permission_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMenuPermissionMatrixRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMenuPermissionMatrixRequest) ProtoMessage() {}

func (x *GetMenuPermissionMatrixRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apiserver_v1_menu_permission_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMenuPermissionMatrixRequest.ProtoReflect.Descriptor instead.
func (*GetMenuPermissionMatrixRequest) Descriptor() ([]byte, []int) {
	return file_apiserver_v1_menu_permission_proto_rawDescGZIP(), []int{16}
}

func (x *GetMenuPermissionMatrixRequest) GetTenantId() int64 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

func (x *GetMenuPermissionMatrixRequest) GetMenuTypes() []int32 {
	if x != nil {
		return x.MenuTypes
	}
	return nil
}

// GetMenuPermissionMatrixResponse 获取菜单权限矩阵响应
type GetMenuPermissionMatrixResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// tenant_id 租户ID
	TenantId int64 `protobuf:"varint,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// matrix 菜单权限矩阵
	Matrix []*MenuPermissionMatrix `protobuf:"bytes,2,rep,name=matrix,proto3" json:"matrix,omitempty"`
	// total_menus 总菜单数
	TotalMenus int32 `protobuf:"varint,3,opt,name=total_menus,json=totalMenus,proto3" json:"total_menus,omitempty"`
	// total_permissions 总权限数
	TotalPermissions int32 `protobuf:"varint,4,opt,name=total_permissions,json=totalPermissions,proto3" json:"total_permissions,omitempty"`
}

func (x *GetMenuPermissionMatrixResponse) Reset() {
	*x = GetMenuPermissionMatrixResponse{}
	mi := &file_apiserver_v1_menu_permission_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMenuPermissionMatrixResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMenuPermissionMatrixResponse) ProtoMessage() {}

func (x *GetMenuPermissionMatrixResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apiserver_v1_menu_permission_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMenuPermissionMatrixResponse.ProtoReflect.Descriptor instead.
func (*GetMenuPermissionMatrixResponse) Descriptor() ([]byte, []int) {
	return file_apiserver_v1_menu_permission_proto_rawDescGZIP(), []int{17}
}

func (x *GetMenuPermissionMatrixResponse) GetTenantId() int64 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

func (x *GetMenuPermissionMatrixResponse) GetMatrix() []*MenuPermissionMatrix {
	if x != nil {
		return x.Matrix
	}
	return nil
}

func (x *GetMenuPermissionMatrixResponse) GetTotalMenus() int32 {
	if x != nil {
		return x.TotalMenus
	}
	return 0
}

func (x *GetMenuPermissionMatrixResponse) GetTotalPermissions() int32 {
	if x != nil {
		return x.TotalPermissions
	}
	return 0
}

// MenuPermissionMatrix 菜单权限矩阵
type MenuPermissionMatrix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// menu_id 菜单ID
	MenuId int64 `protobuf:"varint,1,opt,name=menu_id,json=menuId,proto3" json:"menu_id,omitempty"`
	// menu_code 菜单编码
	MenuCode string `protobuf:"bytes,2,opt,name=menu_code,json=menuCode,proto3" json:"menu_code,omitempty"`
	// menu_title 菜单标题
	MenuTitle string `protobuf:"bytes,3,opt,name=menu_title,json=menuTitle,proto3" json:"menu_title,omitempty"`
	// required_permissions 必需权限
	RequiredPermissions []*Permission `protobuf:"bytes,4,rep,name=required_permissions,json=requiredPermissions,proto3" json:"required_permissions,omitempty"`
	// optional_permissions 可选权限
	OptionalPermissions []*Permission `protobuf:"bytes,5,rep,name=optional_permissions,json=optionalPermissions,proto3" json:"optional_permissions,omitempty"`
	// permission_count 权限总数
	PermissionCount int32 `protobuf:"varint,6,opt,name=permission_count,json=permissionCount,proto3" json:"permission_count,omitempty"`
}

func (x *MenuPermissionMatrix) Reset() {
	*x = MenuPermissionMatrix{}
	mi := &file_apiserver_v1_menu_permission_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MenuPermissionMatrix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MenuPermissionMatrix) ProtoMessage() {}

func (x *MenuPermissionMatrix) ProtoReflect() protoreflect.Message {
	mi := &file_apiserver_v1_menu_permission_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MenuPermissionMatrix.ProtoReflect.Descriptor instead.
func (*MenuPermissionMatrix) Descriptor() ([]byte, []int) {
	return file_apiserver_v1_menu_permission_proto_rawDescGZIP(), []int{18}
}

func (x *MenuPermissionMatrix) GetMenuId() int64 {
	if x != nil {
		return x.MenuId
	}
	return 0
}

func (x *MenuPermissionMatrix) GetMenuCode() string {
	if x != nil {
		return x.MenuCode
	}
	return ""
}

func (x *MenuPermissionMatrix) GetMenuTitle() string {
	if x != nil {
		return x.MenuTitle
	}
	return ""
}

func (x *MenuPermissionMatrix) GetRequiredPermissions() []*Permission {
	if x != nil {
		return x.RequiredPermissions
	}
	return nil
}

func (x *MenuPermissionMatrix) GetOptionalPermissions() []*Permission {
	if x != nil {
		return x.OptionalPermissions
	}
	return nil
}

func (x *MenuPermissionMatrix) GetPermissionCount() int32 {
	if x != nil {
		return x.PermissionCount
	}
	return 0
}

var File_apiserver_v1_menu_permission_proto protoreflect.FileDescriptor

var file_apiserver_v1_menu_permission_proto_rawDesc = []byte{
	0x0a, 0x22, 0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6d,
	0x65, 0x6e, 0x75, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x76, 0x31, 0x1a, 0x1d, 0x61, 0x70, 0x69, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x92, 0x02, 0x0a, 0x0e, 0x4d, 0x65, 0x6e,
	0x75, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x65, 0x6e, 0x75,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x65, 0x6e, 0x75, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xa2, 0x01,
	0x0a, 0x10, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x22, 0xe6, 0x01, 0x0a, 0x13, 0x4d, 0x65, 0x6e, 0x75, 0x57, 0x69, 0x74, 0x68, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x65,
	0x6e, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x65, 0x6e,
	0x75, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x0b, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b,
	0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x41, 0x0a, 0x14, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b,
	0x0a, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x72, 0x0a, 0x1f, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x6d, 0x65, 0x6e, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x6d, 0x65, 0x6e, 0x75, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0x7d, 0x0a, 0x20, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x6e, 0x75,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x5f,
	0x0a, 0x19, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6e, 0x75, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6d,
	0x65, 0x6e, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x65,
	0x6e, 0x75, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22,
	0xf4, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6e, 0x75, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x6d, 0x65, 0x6e, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x6d, 0x65, 0x6e, 0x75, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x5f, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x41, 0x0a, 0x14, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x13,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x41, 0x0a, 0x14, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f,
	0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x13, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x40, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6e, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x70, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6e, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x05, 0x6d,
	0x65, 0x6e, 0x75, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x65, 0x6e, 0x75, 0x57, 0x69, 0x74, 0x68, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x05, 0x6d, 0x65, 0x6e, 0x75, 0x73, 0x22, 0x7e, 0x0a, 0x1d, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x6e, 0x75, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xf8, 0x01, 0x0a, 0x1e, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x6e, 0x75, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x10, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c,
	0x65, 0x5f, 0x6d, 0x65, 0x6e, 0x75, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6e, 0x75, 0x57, 0x69, 0x74, 0x68, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x6d, 0x65, 0x6e, 0x75, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x65, 0x6e, 0x75, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f,
	0x6d, 0x65, 0x6e, 0x75, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x13, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x6e, 0x75,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x93, 0x01, 0x0a, 0x19, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x65, 0x6e, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x65, 0x6e, 0x75, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb3, 0x01, 0x0a, 0x1a,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x61,
	0x73, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x68, 0x61, 0x73, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x8e, 0x01, 0x0a, 0x24, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6e, 0x75, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x0e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63,
	0x6c, 0x65, 0x61, 0x72, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x22, 0x66, 0x0a, 0x13, 0x4d, 0x65, 0x6e, 0x75, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x65, 0x6e,
	0x75, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x65, 0x6e, 0x75,
	0x49, 0x64, 0x12, 0x36, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xbd, 0x01, 0x0a, 0x25, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x6e,
	0x75, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x5c, 0x0a, 0x1e, 0x47, 0x65,
	0x74, 0x4d, 0x65, 0x6e, 0x75, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d,
	0x61, 0x74, 0x72, 0x69, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x6e,
	0x75, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x6d,
	0x65, 0x6e, 0x75, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0xbe, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74,
	0x4d, 0x65, 0x6e, 0x75, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61,
	0x74, 0x72, 0x69, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x06, 0x6d, 0x61, 0x74,
	0x72, 0x69, 0x78, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x65, 0x6e, 0x75, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x74,
	0x72, 0x69, 0x78, 0x52, 0x06, 0x6d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x6e, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x65, 0x6e, 0x75, 0x73, 0x12, 0x2b, 0x0a, 0x11,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x9c, 0x02, 0x0a, 0x14, 0x4d, 0x65,
	0x6e, 0x75, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x72,
	0x69, 0x78, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x65, 0x6e, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x65, 0x6e, 0x75, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x65, 0x6e, 0x75, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6d, 0x65, 0x6e, 0x75, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x6e, 0x75,
	0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65,
	0x6e, 0x75, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x41, 0x0a, 0x14, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x41, 0x0a, 0x14, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x29, 0x0a,
	0x10, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x37, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x73, 0x68, 0x77, 0x69, 0x6e, 0x79, 0x75, 0x65,
	0x2f, 0x6f, 0x6e, 0x65, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x76,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_apiserver_v1_menu_permission_proto_rawDescOnce sync.Once
	file_apiserver_v1_menu_permission_proto_rawDescData = file_apiserver_v1_menu_permission_proto_rawDesc
)

func file_apiserver_v1_menu_permission_proto_rawDescGZIP() []byte {
	file_apiserver_v1_menu_permission_proto_rawDescOnce.Do(func() {
		file_apiserver_v1_menu_permission_proto_rawDescData = protoimpl.X.CompressGZIP(file_apiserver_v1_menu_permission_proto_rawDescData)
	})
	return file_apiserver_v1_menu_permission_proto_rawDescData
}

var file_apiserver_v1_menu_permission_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_apiserver_v1_menu_permission_proto_goTypes = []any{
	(*MenuPermission)(nil),                        // 0: v1.MenuPermission
	(*PermissionConfig)(nil),                      // 1: v1.PermissionConfig
	(*MenuWithPermissions)(nil),                   // 2: v1.MenuWithPermissions
	(*ConfigureMenuPermissionsRequest)(nil),       // 3: v1.ConfigureMenuPermissionsRequest
	(*ConfigureMenuPermissionsResponse)(nil),      // 4: v1.ConfigureMenuPermissionsResponse
	(*GetMenuPermissionsRequest)(nil),             // 5: v1.GetMenuPermissionsRequest
	(*GetMenuPermissionsResponse)(nil),            // 6: v1.GetMenuPermissionsResponse
	(*GetPermissionMenusRequest)(nil),             // 7: v1.GetPermissionMenusRequest
	(*GetPermissionMenusResponse)(nil),            // 8: v1.GetPermissionMenusResponse
	(*GetUserMenuPermissionsRequest)(nil),         // 9: v1.GetUserMenuPermissionsRequest
	(*GetUserMenuPermissionsResponse)(nil),        // 10: v1.GetUserMenuPermissionsResponse
	(*ValidateMenuAccessRequest)(nil),             // 11: v1.ValidateMenuAccessRequest
	(*ValidateMenuAccessResponse)(nil),            // 12: v1.ValidateMenuAccessResponse
	(*BatchConfigureMenuPermissionsRequest)(nil),  // 13: v1.BatchConfigureMenuPermissionsRequest
	(*MenuPermissionBatch)(nil),                   // 14: v1.MenuPermissionBatch
	(*BatchConfigureMenuPermissionsResponse)(nil), // 15: v1.BatchConfigureMenuPermissionsResponse
	(*GetMenuPermissionMatrixRequest)(nil),        // 16: v1.GetMenuPermissionMatrixRequest
	(*GetMenuPermissionMatrixResponse)(nil),       // 17: v1.GetMenuPermissionMatrixResponse
	(*MenuPermissionMatrix)(nil),                  // 18: v1.MenuPermissionMatrix
	(*timestamppb.Timestamp)(nil),                 // 19: google.protobuf.Timestamp
	(*Permission)(nil),                            // 20: v1.Permission
}
var file_apiserver_v1_menu_permission_proto_depIdxs = []int32{
	19, // 0: v1.MenuPermission.created_at:type_name -> google.protobuf.Timestamp
	19, // 1: v1.MenuPermission.updated_at:type_name -> google.protobuf.Timestamp
	20, // 2: v1.MenuWithPermissions.permissions:type_name -> v1.Permission
	20, // 3: v1.MenuWithPermissions.required_permissions:type_name -> v1.Permission
	1,  // 4: v1.ConfigureMenuPermissionsRequest.permissions:type_name -> v1.PermissionConfig
	20, // 5: v1.GetMenuPermissionsResponse.all_permissions:type_name -> v1.Permission
	20, // 6: v1.GetMenuPermissionsResponse.required_permissions:type_name -> v1.Permission
	20, // 7: v1.GetMenuPermissionsResponse.optional_permissions:type_name -> v1.Permission
	2,  // 8: v1.GetPermissionMenusResponse.menus:type_name -> v1.MenuWithPermissions
	2,  // 9: v1.GetUserMenuPermissionsResponse.accessible_menus:type_name -> v1.MenuWithPermissions
	14, // 10: v1.BatchConfigureMenuPermissionsRequest.configurations:type_name -> v1.MenuPermissionBatch
	1,  // 11: v1.MenuPermissionBatch.permissions:type_name -> v1.PermissionConfig
	18, // 12: v1.GetMenuPermissionMatrixResponse.matrix:type_name -> v1.MenuPermissionMatrix
	20, // 13: v1.MenuPermissionMatrix.required_permissions:type_name -> v1.Permission
	20, // 14: v1.MenuPermissionMatrix.optional_permissions:type_name -> v1.Permission
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_apiserver_v1_menu_permission_proto_init() }
func file_apiserver_v1_menu_permission_proto_init() {
	if File_apiserver_v1_menu_permission_proto != nil {
		return
	}
	file_apiserver_v1_permission_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_apiserver_v1_menu_permission_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_apiserver_v1_menu_permission_proto_goTypes,
		DependencyIndexes: file_apiserver_v1_menu_permission_proto_depIdxs,
		MessageInfos:      file_apiserver_v1_menu_permission_proto_msgTypes,
	}.Build()
	File_apiserver_v1_menu_permission_proto = out.File
	file_apiserver_v1_menu_permission_proto_rawDesc = nil
	file_apiserver_v1_menu_permission_proto_goTypes = nil
	file_apiserver_v1_menu_permission_proto_depIdxs = nil
}
